/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package mib.p;

import javax.swing.JOptionPane;
import oru.inf.InfDB;
import oru.inf.InfException;
import java.util.HashMap;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;

/**
 * AndraAlienInfoForm är en JPanel-klass som visar en panel över ett formulär
 * för att utifrån Alien ID söka upp information om aliens registrerade i
 * databasen, och sedan ändra den informationen som man tycker behöver
 * uppdateras, klassen tar in String epost, och String isAdmin som håller reda
 * på vilken agent som är inloggad, och om denne är admin.
 *
 * @author ASUS
 *
 *
 */
public class AndraAlienInfoForm extends javax.swing.JPanel {

    private static InfDB idb;
    private String epost;
    private String isAdmin;
    private ValideringsKlass validera = new ValideringsKlass();
    private int varierande;
    private String varierandeString;

    /**
     * Creates new form AlienSokForm
     */
    public AndraAlienInfoForm(String epost, String isAdmin) {

        this.isAdmin = isAdmin;
        initComponents();
        try {
            idb = new InfDB("mibdb", "3306", "mibdba", "mibkey");
        } catch (InfException ex) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
           
        }
        this.epost = epost;
        varierande = 0;
        varierandeString = "";

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        txtAlienIdSok = new javax.swing.JTextField();
        btnSok = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        labRas = new javax.swing.JLabel();
        txtNamn = new javax.swing.JTextField();
        labTelefon = new javax.swing.JLabel();
        txtRas = new javax.swing.JTextField();
        labRegDatum = new javax.swing.JLabel();
        labAnsvAgent = new javax.swing.JLabel();
        txtTelefon = new javax.swing.JTextField();
        txtRegDatum = new javax.swing.JTextField();
        labNamn = new javax.swing.JLabel();
        txtPlats = new javax.swing.JTextField();
        txtLosenOrd = new javax.swing.JTextField();
        labLosenOrd = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtAndraNamn = new javax.swing.JTextField();
        txtAndraTelefon = new javax.swing.JTextField();
        txtAndraRegDatum = new javax.swing.JTextField();
        txtAnsvAgent = new javax.swing.JTextField();
        txtAndraLosenOrd = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jComboAgenter = new javax.swing.JComboBox<>();
        cbValjRas = new javax.swing.JComboBox<>();
        jComboValjPlats = new javax.swing.JComboBox<>();
        btnMinSida = new javax.swing.JButton();
        btnAndraInfo = new javax.swing.JButton();
        btnRensa = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(550, 343));
        setMinimumSize(new java.awt.Dimension(550, 343));
        setName(""); // NOI18N

        jLabel2.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        jLabel2.setText("Ange Alien ID:");

        btnSok.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        btnSok.setText("Sök");
        btnSok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSokActionPerformed(evt);
            }
        });

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(153, 153, 153), new java.awt.Color(204, 204, 204), null, null));

        labRas.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        labRas.setText("Ras:");

        labTelefon.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        labTelefon.setText("Telefon:");

        labRegDatum.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        labRegDatum.setText("Reg-datum:");

        labAnsvAgent.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        labAnsvAgent.setText("Ansvarig agent:");

        labNamn.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        labNamn.setText("Namn:");

        labLosenOrd.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        labLosenOrd.setText("Lösenord:");

        jLabel3.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        jLabel3.setText("Plats:");

        jLabel1.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        jLabel1.setText("Nuvarande info");

        jLabel4.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        jLabel4.setText("Ny info");

        jComboAgenter.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Välj agent" }));
        jComboAgenter.setToolTipText("");

        cbValjRas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Välj ras" }));
        cbValjRas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbValjRasActionPerformed(evt);
            }
        });

        jComboValjPlats.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Välj plats" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labTelefon)
                    .addComponent(labRegDatum)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labAnsvAgent)
                                    .addComponent(labNamn)
                                    .addComponent(jLabel3)
                                    .addComponent(labLosenOrd))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtNamn)
                                        .addComponent(txtRas)
                                        .addComponent(txtTelefon)
                                        .addComponent(txtRegDatum)
                                        .addComponent(txtAnsvAgent)
                                        .addComponent(txtPlats, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtLosenOrd, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel1)))
                            .addComponent(labRas))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtAndraTelefon)
                            .addComponent(txtAndraRegDatum, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtAndraLosenOrd)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel4)
                                    .addComponent(txtAndraNamn)
                                    .addComponent(jComboAgenter, 0, 144, Short.MAX_VALUE)
                                    .addComponent(cbValjRas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jComboValjPlats, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNamn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labNamn)
                    .addComponent(txtAndraNamn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labRas)
                    .addComponent(cbValjRas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTelefon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labTelefon)
                    .addComponent(txtAndraTelefon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRegDatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labRegDatum)
                    .addComponent(txtAndraRegDatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labAnsvAgent)
                    .addComponent(txtAnsvAgent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboAgenter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPlats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jComboValjPlats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLosenOrd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labLosenOrd)
                    .addComponent(txtAndraLosenOrd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnMinSida.setBackground(new java.awt.Color(242, 242, 242));
        btnMinSida.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        btnMinSida.setText("Min sida");
        btnMinSida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinSidaActionPerformed(evt);
            }
        });

        btnAndraInfo.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        btnAndraInfo.setText("Uppdatera");
        btnAndraInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAndraInfoActionPerformed(evt);
            }
        });

        btnRensa.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        btnRensa.setText("Rensa");
        btnRensa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRensaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnMinSida))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(80, 80, 80)
                                .addComponent(jLabel2)
                                .addGap(28, 28, 28)
                                .addComponent(txtAlienIdSok, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnSok, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 64, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(209, 209, 209)
                .addComponent(btnAndraInfo)
                .addGap(18, 18, 18)
                .addComponent(btnRensa)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtAlienIdSok, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSok))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAndraInfo)
                    .addComponent(btnRensa))
                .addGap(5, 5, 5)
                .addComponent(btnMinSida)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Metod kopplad till btnSok som först fyller upp alla comboxar genom
     * respektive box-metod, och sedan kör alienSok() för att få fram info om
     * vald alien.
     *
     * @param evt
     */
    private void btnSokActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSokActionPerformed
        resetComboBoxes();
        String alienIDString = txtAlienIdSok.getText();
        if (!ValideringsKlass.existerarAlienID(alienIDString) && ValideringsKlass.valideraInt(alienIDString)) {
            JOptionPane.showMessageDialog(null, "Valt Alien-ID existerar inte i databasen. Försök igen.");
        }
        txtRas.setText("");
        fyllAgentComboBox();
        fyllValjPlatsCombo();
        fyllValjRasComboBox();
        alienSok();

    }//GEN-LAST:event_btnSokActionPerformed
    /**
     * Metod kopplad till btnMinSida som fyller upp JFrame med en ny instans av
     * MinSidaAgentForm för att användaren ska kunna ta sig tillbaka till sin
     * sida, epost och isAdmin skickas med som parametrar för att initialiera en
     * ny "Min Sida", fönster-titeln sätts till "Startida: Agent" och fönstret
     * "målas om" för att visa "Min Sida"-panelen.
     *
     * @param evt
     */
    private void btnMinSidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinSidaActionPerformed
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(AndraAlienInfoForm.this);
        frame.setContentPane(new MinSidaAgentForm(epost, isAdmin));
        frame.revalidate();
        frame.setTitle("Startsida: Agent");
        frame.repaint();
    }//GEN-LAST:event_btnMinSidaActionPerformed
    /**
     * Metod kopplad till btnAndraInfo som genom metoder från valideringsklassen
     * testar all input från användaren och sedan utfrån det antingen ger
     * felmeddelande eller fortsätter med de olika metoderna för att utföra
     * ändringarna.
     *
     * @param evt
     */
    private void btnAndraInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAndraInfoActionPerformed
        String stringId = txtAlienIdSok.getText();
        int alienID = Integer.parseInt(stringId);

        if (ValideringsKlass.validateTextFieldNotEmpty(txtAndraNamn.getText())) {
            andraNamn(alienID);
        }
        if (ValideringsKlass.validateTextFieldNotEmpty(txtAndraTelefon.getText())) {
            andraTelefon(alienID);
        }
        if (ValideringsKlass.validateTextFieldNotEmpty(txtAndraLosenOrd.getText())) {
            andraLosenOrd(alienID);
        }
        if (ValideringsKlass.validateTextFieldNotEmpty(txtAndraRegDatum.getText())) {
            andraRegDatum(alienID);

        }
        if (!cbValjRas.getSelectedItem().toString().equals("Välj ras") && ValideringsKlass.validateTextFieldNotEmpty(txtRas.getText())) {
            String nuvarandeRas = txtRas.getText();
            String nyRas = cbValjRas.getSelectedItem().toString();
            if (nyRas.equals("Worm") || nyRas.equals("Boglodite") || nyRas.equals("Squid")) {
                andraRas(nuvarandeRas, nyRas, Integer.parseInt(txtAlienIdSok.getText()));
            }
        }
        if (!cbValjRas.getSelectedItem().toString().equals("Välj ras") && !ValideringsKlass.validateTextFieldNotEmpty(txtRas.getText())) {
            String nyRas = cbValjRas.getSelectedItem().toString();
            laggTillAlienRas(nyRas, alienID, varierandeString, varierande);
            JOptionPane.showMessageDialog(null, "Rasen uppdaterades. Ny ras: " + nyRas);

        }
        if (!jComboAgenter.getSelectedItem().equals("Välj agent")) {
            String agentNamn = jComboAgenter.getSelectedItem().toString();
            andraAnsvarigAgent(agentNamn, alienID);
            JOptionPane.showMessageDialog(null, "Ansvarig agent uppdaterades. Ny ansvarig agent: " + agentNamn);
        }
        if (!jComboValjPlats.getSelectedItem().equals("Välj plats")) {
            String nyPlats = jComboValjPlats.getSelectedItem().toString();
            andraPlats(alienID);
            JOptionPane.showMessageDialog(null, "Plats uppdaterades. Ny plats: " + nyPlats);
            txtPlats.setText(nyPlats);
        }
        jComboAgenter.setSelectedIndex(0);
        jComboValjPlats.setSelectedIndex(0);
        cbValjRas.setSelectedIndex(0);
    }//GEN-LAST:event_btnAndraInfoActionPerformed
    /**
     * Metod kopplat till btnRensa, som först återställer comboboxarna med
     * metoden resetComboBoxes(), och sedan återställer textfälten med
     * resetTextFalt().
     *
     * @param evt
     */
    private void btnRensaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRensaActionPerformed
        cbValjRas.setSelectedIndex(0);
        resetTextFalt();
    }//GEN-LAST:event_btnRensaActionPerformed
    /**
     * Metod kopplad till cbCbValjRas, som när ett alternativ på ras väljs i
     * comboboxen ger användaren information om att ange det värde som är
     * varierande för varje ras (boogies,längd,armar) för att sedan sätta en
     * varierande Int-variabel med det värdet, och en varierande String-variabel
     * med kolumn-namnet för den varierande kolumnen hos varje ras, inför att
     * sedan kunna använda dessa variablar i metoden laggTillAlienRas().
     *
     * @param evt
     */
    private void cbValjRasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbValjRasActionPerformed
        if (ValideringsKlass.valideraComboBoxAktivtVal(cbValjRas) && !ValideringsKlass.valideraComboBox(cbValjRas)) {
            String valdRas = cbValjRas.getSelectedItem().toString();

            if (valdRas.equals("Boglodite")) {
                String input = JOptionPane.showInputDialog(null, "Välj antal boogies.");
                if (ValideringsKlass.valideraInt(input)) {
                    varierande = Integer.parseInt(input);
                    varierandeString = "Antal_boogies";

                } else {
                    JOptionPane.showMessageDialog(null, "Ange ett heltalsvärde för antal boogies.");
                }
            }
            if (valdRas.equals("Worm")) {
                String input = JOptionPane.showInputDialog(null, "Välj antal längd.");
                if (ValideringsKlass.valideraInt(input)) {
                    varierande = Integer.parseInt(input);
                    varierandeString = "Langd";

                } else {
                    JOptionPane.showMessageDialog(null, "Ange ett heltalsvärde för antal längd.");
                }
            }
            if (valdRas.equals("Squid")) {
                String input = JOptionPane.showInputDialog(null, "Välj antal armar.");
                if (ValideringsKlass.valideraInt(input)) {
                    varierande = Integer.parseInt(input);
                    varierandeString = "Antal_armar";

                } else {
                    JOptionPane.showMessageDialog(null, "Ange ett heltalsvärde för antal armar.");
                }
            }

        }
    }//GEN-LAST:event_cbValjRasActionPerformed
    /**
     * Metod som tar emot en HashMap och utifrån dess nycklar sätter respektive
     * textfält med värdena från HashMapen.
     *
     * @param alienInfo
     */
    private void setTextFalt(HashMap<String, String> alienInfo) {
        txtNamn.setText(alienInfo.get("Namn"));
        txtRegDatum.setText(alienInfo.get("Registreringsdatum"));
        txtLosenOrd.setText(alienInfo.get("Losenord"));

        txtTelefon.setText(alienInfo.get("Telefon"));

    }

    /**
     * Metod som genom InfDB-metoden fetchSingle() hämtar namnet på den agent
     * som vald alien har som ansvarig agent, utifrån dennes Alien_ID, och
     * txtAnsvAgent sätts sedan med aktuell Agent..
     *
     * @param alienID
     */
    private void setAgent(int alienID) {
        try {
            String agentNamn = idb.fetchSingle("SELECT namn FROM mibdb.agent WHERE Agent_ID IN (SELECT Ansvarig_Agent FROM mibdb.alien WHERE Alien_ID = " + alienID + ")");
            txtAnsvAgent.setText(agentNamn);
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Något gick fel vid hämtning av data.");

        }
    }

    /**
     * Metod som genom InfDB-metoden fetchSingle() hämtar benämningen på den
     * plats där vald alien är registrerad, utifrån dennes Alien_ID, och
     * txtPlats sätts sedan med aktuell plats.
     *
     * @param alienID
     */
    private void setPlats(int alienID) {
        try {
            String platsNamn = idb.fetchSingle("SELECT Benamning FROM mibdb.plats WHERE Plats_ID IN (SELECT Plats FROM mibdb.alien WHERE Alien_ID = " + alienID + ")");
            txtPlats.setText(platsNamn);
        } catch (InfException e) {

        }

    }

    /**
     * Metod som genom InfDB-metoden fetchColumn skapar ArrayListor av Alien_ID
     * för de olika raserna, och sedan letas dessa listor igenom efter valt
     * Alien_ID och rasen sätts utifrån vilken lista det hittades i, och txtRas
     * sätts sedan med aktuell ras.
     *
     * @param alienID
     */
    private void setRas(int alienID) {

        String alienIdString = Integer.toString(alienID);

        try {
            ArrayList<String> worm = idb.fetchColumn("SELECT Alien_ID FROM mibdb.worm");
            if (worm.contains(alienIdString)) {
                txtRas.setText("Worm");
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Något gick fel vid hämtning av data.");
        }
        try {
            ArrayList<String> squid = idb.fetchColumn("SELECT Alien_ID FROM mibdb.squid");
            if (squid.contains(alienIdString)) {
                txtRas.setText("Squid");
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Något gick fel vid hämtning av data.");

        }
        try {
            ArrayList<String> boglodite = idb.fetchColumn("SELECT Alien_ID FROM mibdb.boglodite");
            if (boglodite.contains(alienIdString)) {
                txtRas.setText("Boglodite");
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Något gick fel vid hämtning av data.");

        }

    }

    /**
     * Metod som söker upp nuvarande uppgifter om vald alien utifrån dennes
     * Alien_ID, och med hjälp av InfDB-metoden fetchRow skapar en HashMap som
     * sedan körs genom setTextFalt()-metoden för att sätta text på aktuella
     * fält, metoderna setAgent(), setPlats() och setRas() körs också för att
     * rätta text på respektive fält.
     */
    private void alienSok() {
        int alienID;
        if (ValideringsKlass.valideraInt(txtAlienIdSok.getText())) {
            alienID = Integer.parseInt(txtAlienIdSok.getText());
        } else {
            JOptionPane.showMessageDialog(null, "Felaktig inmatning. Ange ett giltigt Alien-ID.");
            return;
        }

        try {
            HashMap<String, String> alienInfo = idb.fetchRow("SELECT * FROM mibdb.alien WHERE Alien_ID = " + alienID + ";");
            setTextFalt(alienInfo);
            setAgent(alienID);
            setPlats(alienID);
            setRas(alienID);

        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Ett fel uppstod vid sökningen av alien.");
        }
    }

    /**
     * Metod som genom InfDB-metoden update() uppdaterar kolumnen Namn i
     * alien-tabellen där aktuellt Alien_ID hittas,txtNamn sätts till till det
     * nya namnet, och txtAndraNamn återställs till "".
     *
     * @param alienID
     */
    public void andraNamn(int alienID) {

        String nyttNamn = txtAndraNamn.getText();
        try {
            String query = "UPDATE mibdb.alien SET Namn = '" + nyttNamn + "' WHERE Alien_ID = '" + alienID + "'";
            idb.update(query);
            JOptionPane.showMessageDialog(null, "Namnet uppdaterades. Nytt namn: " + nyttNamn);
            txtNamn.setText(nyttNamn);
            txtAndraNamn.setText("");
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Ett fel inträffade vid uppdatering av data.");
        }

    }

    /**
     * Metod som genom InfDB-metoden update() uppdaterar kolumnen telefon i
     * alien-tabellen där aktuellt Alien_ID hittas, efter att inputen validerats
     * som int, txtTelefon sätts sedan till det nyta telefonnumret, och
     * txtAndraTelefon återställs till "".
     *
     * @param alienID
     */
    public void andraTelefon(int alienID) {
        String nyttNummer = txtAndraTelefon.getText();
        if (ValideringsKlass.valideraTelefonNummer(nyttNummer)) {

            try {
                String query = "UPDATE mibdb.alien SET Telefon = '" + nyttNummer + "' WHERE Alien_ID = '" + alienID + "'";
                idb.update(query);
                JOptionPane.showMessageDialog(null, "Numret uppdaterades. Nytt nummer: " + nyttNummer);
                txtTelefon.setText(nyttNummer);
                txtAndraTelefon.setText("");
            } catch (InfException e) {
                JOptionPane.showMessageDialog(null, "Ett fel inträffade vid uppdatering av telefonnumret.");
            }
        }
    }

    /**
     * Metod som genom InfDB-metoden update() uppdaterar kolumnen Losenord i
     * alien-tabellen där aktuellt Alien_ID hittas, txtLosenord sätts sedan till
     * det nyta lösenordet, och txtAndraLosenOrd återställs till "".
     *
     * @param alienID
     */
    public void andraLosenOrd(int alienID) {
        String nyttLosenOrd = txtAndraLosenOrd.getText();
        {

            try {
                String query = "UPDATE mibdb.alien SET Losenord = '" + nyttLosenOrd + "' WHERE Alien_ID = '" + alienID + "'";
                idb.update(query);
                JOptionPane.showMessageDialog(null, "Lösenordet uppdaterades. Nytt lösenord: " + nyttLosenOrd);
                txtLosenOrd.setText(nyttLosenOrd);
                txtAndraLosenOrd.setText("");
            } catch (InfException e) {
                JOptionPane.showMessageDialog(null, "Lösenord för långt. Välj max sex tecken.");
            }
        }

    }

    /**
     * Metod som först kontrollerar att inskrivet datum är ett godkänt sådant,
     * genom valideringsklass-metoden valideraDatum(), och sedan använder
     * InfDB-metoden update() för att uppdatera registreringsdatum för den alien
     * där aktuellt Alien_ID hittas, txtRegDatum sätts med nytt datum och
     * txtAndraRegDatum återställs till "".
     *
     * @param alienID
     */
    public void andraRegDatum(int alienID) {
        String nyttRegDatum = txtAndraRegDatum.getText();
        if (ValideringsKlass.valideraDatum(nyttRegDatum)) {
            try {
                String query = "UPDATE mibdb.alien SET Registreringsdatum = '" + nyttRegDatum + "' WHERE Alien_ID = '" + alienID + "'";
                idb.update(query);
                JOptionPane.showMessageDialog(null, "Registreringsdatum uppdaterades. Nytt datum: " + nyttRegDatum);
                txtRegDatum.setText(nyttRegDatum);
                txtAndraRegDatum.setText("");
            } catch (InfException e) {
                JOptionPane.showMessageDialog(null, " Ogiltigt registreringsdatum. Ange enligt YYYY-MM-DD");
            }

        } else {
            JOptionPane.showMessageDialog(null, " Ogiltigt registreringsdatum uppdaterades. Ange enligt YYYY-MM-DD");
        }
    }

    /**
     * Metod som byter ras på vald alien genom att först köra metoden
     * taBortAlien() och sedan laggTillAlienRas() och sätta txtRas med den nya
     * rasen.
     *
     * @param nuvarandeRas
     * @param nyRas
     * @param alienID
     */
    private void andraRas(String nuvarandeRas, String nyRas, int alienID) {

        taBortAlien(nuvarandeRas, alienID);
        laggTillAlienRas(nyRas, alienID, varierandeString, varierande);
        JOptionPane.showMessageDialog(null, "Rasen uppdaterades. Ny ras: " + nyRas);

        txtRas.setText(nyRas);

    }

    /**
     * Metod som med hjälp av InfDB-metoden update() uppdaterar platsen en alien
     * befinner sig på genom att använda metoden hamtaPlatsID() och sedan
     * uppdatera Plats-kolumnen i alien-tabellen med hämtat Plats_ID, där
     * aktuellt Alien_ID hittas.
     *
     * @param alienID
     */
    public void andraPlats(int alienID) {
        int platsID = hamtaPlatsID(jComboValjPlats.getSelectedItem().toString());
        String query = "UPDATE mibdb.alien SET Plats = " + platsID + " WHERE Alien_ID = " + alienID;

        try {
            idb.update(query);
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Något gick fel vid uppdatering av plats.");
        }
    }

    /**
     * Metod som byter ansvarig agent genom att först med hjälp av InfDB-metoden
     * fetchSingle() hämta ut Agent_ID utfrån agentens namn och sedan används
     * InfDB-metoden update() för att uppdatera Ansvarig_Agent med detta värde
     * där valt Alien_ID finns.
     *
     * @param agentNamn
     * @param alienID
     */
    private void andraAnsvarigAgent(String agentNamn, int alienID) {

        String query = "SELECT Agent_ID FROM mibdb.agent WHERE Namn = '" + agentNamn + "'";

        try {
            int agentID = Integer.parseInt(idb.fetchSingle(query));
            String query2 = "UPDATE mibdb.alien SET Ansvarig_Agent = " + agentID + " WHERE Alien_ID = " + alienID;
            idb.update(query2);
            txtAnsvAgent.setText(agentNamn);
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Något gick fel vid uppdatering av Ansvarig Agent.");
        }

    }

    /**
     * Metod som använder InfDB-metoden insert() för att lägga till aktuellt
     * Alien_ID i tabellen för den nyvalda rasen.
     *
     * @param nyRas
     * @param alienID
     *
     */
    public void laggTillAlienRas(String nyRas, int alienID, String varierandeKolumn, int varierandeVarde) {
        try {
            String query = "INSERT INTO mibdb." + nyRas + " (Alien_ID, " + varierandeKolumn + ") VALUES (" + alienID + ", '" + varierandeVarde + "')";
            idb.insert(query);

            txtRas.setText(nyRas);

        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Något gick fel vid uppdatering av ras.");
        }
    }

    /**
     * Metod som tar bort en alien från tabellen över nuvarande ras, inför att
     * sedan kunna lägga till Alien_ID i den nyvalda rasen, med metoden
     * laggTillAlienRas().
     *
     * @param nuvarandeRas
     * @param alienID
     */
    public void taBortAlien(String nuvarandeRas, int alienID) {
        try {

            String query = "DELETE FROM mibdb." + nuvarandeRas + " WHERE Alien_ID = " + alienID;
            idb.delete(query);

        } catch (InfException e) {
         JOptionPane.showMessageDialog(null, "Något gick fel vid borttagning av alien.");
        }
    }

    /**
     * Metod som med hjälp av en plats namn hämtar info om dess Plats_ID, genom
     * InfDB- metoden fetchSingle, och detta värde returneras som int.
     *
     * @param plats
     * @return
     */
    public int hamtaPlatsID(String plats) {
        int platsID = 0;
        try {
            String query = "SELECT Plats_ID FROM mibdb.plats WHERE Benamning = '" + plats + "'";
            platsID = Integer.parseInt(idb.fetchSingle(query));

        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Något gick fel vid hämtning av plats-ID.");
        }
        return platsID;
    }

    /**
     * Metod som fyller upp agent-comboboxen med hjälp av InfDB-metoden
     * fetchColumn, som skapar en arraylist av Namn från tabellen agent, och
     * sedan loopas denna arraylist genom och värdena läggs till i comboboxen.
     */
    private void fyllAgentComboBox() {
        try {
            String query = "SELECT Namn FROM mibdb.agent";
            ArrayList<String> agentNamn = idb.fetchColumn(query);
            for (String namn : agentNamn) {
                jComboAgenter.addItem(namn);
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Något gick fel vid hämtning av data.");

        }

    }

    /**
     * Metod som fyller upp plats-comboboxen med hjälp av InfDB-metoden
     * fetchColumn, som skapar en arraylist av Benämningarna från tabellen
     * plats, och sedan loopas denna arraylist genom och värdena läggs till i
     * comboboxen.
     */
    private void fyllValjPlatsCombo() {
        try {
            String query = "SELECT Benamning FROM mibdb.plats";
            ArrayList<String> platser = idb.fetchColumn(query);
            for (String plats : platser) {
                jComboValjPlats.addItem(plats);
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Något gick fel vid hämtning av data.");

        }
    }

    /**
     * Metod som fyller upp comboboxen för att välja ras, med de olika raser som
     * finns.
     */
    private void fyllValjRasComboBox() {
        cbValjRas.addItem("Boglodite");
        cbValjRas.addItem("Squid");
        cbValjRas.addItem("Worm");
    }

    /**
     * Metod som återställer ComboBoxarna för Ras, Plats, och Agenter, och
     * lägger in "Välj"- ras, plats,agent på index0 i respektive box.
     *
     */
    private void resetComboBoxes() {
        cbValjRas.removeAllItems();
        cbValjRas.addItem("Välj ras");
        jComboValjPlats.removeAllItems();
        jComboValjPlats.addItem("Välj plats");
        jComboAgenter.removeAllItems();
        jComboAgenter.addItem("Välj agent");

    }

    /**
     * Metod som rensar alla textfält och återställer formuläret.
     */
    private void resetTextFalt() {
        txtAlienIdSok.setText("");
        txtNamn.setText("");
        txtTelefon.setText("");
        txtLosenOrd.setText("");
        txtRegDatum.setText("");
        txtAndraNamn.setText("");
        txtAndraTelefon.setText("");
        txtAndraLosenOrd.setText("");
        txtAndraRegDatum.setText("");
        txtAnsvAgent.setText("");
        txtPlats.setText("");
        txtRas.setText("");

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAndraInfo;
    private javax.swing.JButton btnMinSida;
    private javax.swing.JButton btnRensa;
    private javax.swing.JButton btnSok;
    private javax.swing.JComboBox<String> cbValjRas;
    private javax.swing.JComboBox<String> jComboAgenter;
    private javax.swing.JComboBox<String> jComboValjPlats;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel labAnsvAgent;
    private javax.swing.JLabel labLosenOrd;
    private javax.swing.JLabel labNamn;
    private javax.swing.JLabel labRas;
    private javax.swing.JLabel labRegDatum;
    private javax.swing.JLabel labTelefon;
    private javax.swing.JTextField txtAlienIdSok;
    private javax.swing.JTextField txtAndraLosenOrd;
    private javax.swing.JTextField txtAndraNamn;
    private javax.swing.JTextField txtAndraRegDatum;
    private javax.swing.JTextField txtAndraTelefon;
    private javax.swing.JTextField txtAnsvAgent;
    private javax.swing.JTextField txtLosenOrd;
    private javax.swing.JTextField txtNamn;
    private javax.swing.JTextField txtPlats;
    private javax.swing.JTextField txtRas;
    private javax.swing.JTextField txtRegDatum;
    private javax.swing.JTextField txtTelefon;
    // End of variables declaration//GEN-END:variables
}
