/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package mib.p;

import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import oru.inf.InfDB;
import oru.inf.InfException;

/**
 * KvitteraUtForm är en JPanel-klass där användaren kan kvittera ut ny
 * utrustning som då registreras i tabellen innehar_utrustning, klassen tar in
 * String epost, och String isAdmin som håller reda på vilken agent som är
 * inloggad, och om denne är admin.
 *
 * @author ASUS
 */
public class KvitteraUtForm extends javax.swing.JPanel {

    private int agentID;
    private static InfDB idb;
    private String epost;
    private String isAdmin;

    private SeDinUtrustningForm utrustningsMetoder;

    private String varierande;

    /**
     * Creates new form KvitteraUtLamnaInForm
     */
    public KvitteraUtForm(String epost, String isAdmin) {
        initComponents();
        try {
            idb = new InfDB("mibdb", "3306", "mibdba", "mibkey");
        } catch (InfException ex) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
            System.out.println("Internt felmeddelande" + ex.getMessage());
        }
        this.epost = epost;
        this.isAdmin = isAdmin;
        utrustningsMetoder = new SeDinUtrustningForm(epost, isAdmin);
        agentID = getAgentID();

        varierande = "";

        getAllKomm();
        getAllaVapen();
        getAllTeknik();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblTeknik = new javax.swing.JLabel();
        lblKommunikation = new javax.swing.JLabel();
        btnKvitteraVapen = new javax.swing.JButton();
        btnKvitteraTeknik = new javax.swing.JButton();
        btnKvitteraKomm = new javax.swing.JButton();
        cbKvitteraTeknik = new javax.swing.JComboBox<>();
        cbKvitteraKomm = new javax.swing.JComboBox<>();
        cbKvitteraVapen = new javax.swing.JComboBox<>();
        lblVapen = new javax.swing.JLabel();
        lblDatum = new javax.swing.JLabel();
        txtDatum = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnUtrustning = new javax.swing.JButton();
        btnMinSida = new javax.swing.JButton();

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(102, 102, 102), new java.awt.Color(153, 153, 153), null, null));

        lblTeknik.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        lblTeknik.setText("Teknik:");

        lblKommunikation.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        lblKommunikation.setText("Kommunikation:");

        btnKvitteraVapen.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        btnKvitteraVapen.setText("Kvittera ut");
        btnKvitteraVapen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKvitteraVapenActionPerformed(evt);
            }
        });

        btnKvitteraTeknik.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        btnKvitteraTeknik.setText("Kvittera ut");
        btnKvitteraTeknik.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKvitteraTeknikActionPerformed(evt);
            }
        });

        btnKvitteraKomm.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        btnKvitteraKomm.setText("Kvittera ut");
        btnKvitteraKomm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKvitteraKommActionPerformed(evt);
            }
        });

        lblVapen.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        lblVapen.setText("Vapen:");

        lblDatum.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        lblDatum.setText("Ange datum:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblTeknik)
                    .addComponent(lblKommunikation)
                    .addComponent(lblVapen))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblDatum)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDatum))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(cbKvitteraVapen, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cbKvitteraTeknik, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cbKvitteraKomm, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnKvitteraVapen)
                    .addComponent(btnKvitteraTeknik)
                    .addComponent(btnKvitteraKomm))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDatum)
                    .addComponent(txtDatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbKvitteraVapen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblVapen)
                    .addComponent(btnKvitteraVapen))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbKvitteraTeknik, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTeknik)
                    .addComponent(btnKvitteraTeknik))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbKvitteraKomm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblKommunikation)
                    .addComponent(btnKvitteraKomm))
                .addContainerGap())
        );

        jLabel1.setFont(new java.awt.Font("MS Gothic", 1, 24)); // NOI18N
        jLabel1.setText("Kvittera ut utrustning");

        btnUtrustning.setBackground(new java.awt.Color(242, 242, 242));
        btnUtrustning.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        btnUtrustning.setText("Utrustning");
        btnUtrustning.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUtrustningActionPerformed(evt);
            }
        });

        btnMinSida.setBackground(new java.awt.Color(242, 242, 242));
        btnMinSida.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        btnMinSida.setText("Min Sida");
        btnMinSida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinSidaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(135, 135, 135)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnUtrustning)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnMinSida))
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGap(34, 34, 34)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUtrustning)
                    .addComponent(btnMinSida))
                .addGap(17, 17, 17))
        );
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Metod kopplat till btnKvitteraVapen som när den trycks först via
     * ValideringsKlassen kontrollerar så att datum är ifyllt, och om det är det
     * går vidare med att sätta variabeln "varierande" med namnet på valt
     * utrustning utifrån cbKvitteraVapen-comboboxen, och sedan köra metoden
     * kvitteraUtUtrustning() med datum-variabeln som parameter in i metoden.
     *
     * @param evt
     */
    private void btnKvitteraVapenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKvitteraVapenActionPerformed
        String datum;
        String vapen;
        if (ValideringsKlass.valideraDatum(txtDatum.getText()) && ValideringsKlass.validateTextFieldNotEmpty(txtDatum.getText())) {
            datum = txtDatum.getText();
            vapen = cbKvitteraVapen.getSelectedItem().toString();
            varierande = vapen;
            kvitteraUtUtrustning(datum);

        } else if (!ValideringsKlass.valideraDatum(txtDatum.getText()) && ValideringsKlass.validateTextFieldNotEmpty(txtDatum.getText())) {
            JOptionPane.showMessageDialog(null, "Felaktigt datumformat. Ange datum enligt YYYY-MM-DD");
        } else {
            JOptionPane.showMessageDialog(null, "Var god ange datum innan du kvitterar ut utrustning.");

        }
    }//GEN-LAST:event_btnKvitteraVapenActionPerformed
    /**
     * Metod kopplat till btnKvitteraTeknik som när den trycks först via
     * ValideringsKlassen kontrollerar så att datum är ifyllt, och om det är det
     * går vidare med att sätta variabeln "varierande" med namnet på valt
     * utrustning utifrån cbKvitteraTeknik-comboboxen, och sedan köra metoden
     * kvitteraUtUtrustning() med datum-variabeln som parameter in i metoden.
     *
     * @param evt
     */
    private void btnKvitteraTeknikActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKvitteraTeknikActionPerformed
        String datum;
        String teknik;
        if (ValideringsKlass.valideraDatum(txtDatum.getText()) && ValideringsKlass.validateTextFieldNotEmpty(txtDatum.getText())) {
            datum = txtDatum.getText();
            teknik = cbKvitteraTeknik.getSelectedItem().toString();
            varierande = teknik;
            kvitteraUtUtrustning(datum);

        } else if (!ValideringsKlass.valideraDatum(txtDatum.getText()) && ValideringsKlass.validateTextFieldNotEmpty(txtDatum.getText())) {
            JOptionPane.showMessageDialog(null, "Felaktigt datumformat. Ange datum enligt YYYY-MM-DD");
        } else {
            JOptionPane.showMessageDialog(null, "Var god ange datum innan du kvitterar ut utrustning.");

        }
    }//GEN-LAST:event_btnKvitteraTeknikActionPerformed
    /**
     * Metod kopplat till btnKvitteraKomm som när den trycks först via
     * ValideringsKlassen kontrollerar så att datum är ifyllt, och om det är det
     * går vidare med att sätta variabeln "varierande" med namnet på valt
     * utrustning utifrån cbKvitteraKomm-comboboxen, och sedan köra metoden
     * kvitteraUtUtrustning() med datum-variabeln som parameter in i metoden.
     *
     * @param evt
     */
    private void btnKvitteraKommActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKvitteraKommActionPerformed
        String datum;
        String komm;
        if (ValideringsKlass.valideraDatum(txtDatum.getText()) && ValideringsKlass.validateTextFieldNotEmpty(txtDatum.getText())) {
            datum = txtDatum.getText();
            komm = cbKvitteraKomm.getSelectedItem().toString();
            varierande = komm;
            kvitteraUtUtrustning(datum);

        } else if (!ValideringsKlass.valideraDatum(txtDatum.getText()) && ValideringsKlass.validateTextFieldNotEmpty(txtDatum.getText())) {
            JOptionPane.showMessageDialog(null, "Felaktigt datumformat. Ange datum enligt YYYY-MM-DD");
        } else {
            JOptionPane.showMessageDialog(null, "Var god ange datum innan du kvitterar ut utrustning.");

        }
    }//GEN-LAST:event_btnKvitteraKommActionPerformed

    private void btnUtrustningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUtrustningActionPerformed
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(KvitteraUtForm.this);
        frame.setContentPane(new HanteraUtrustningForm(epost, isAdmin));
        frame.revalidate();
        frame.setTitle("Hantera utrustning");
        frame.repaint();
    }//GEN-LAST:event_btnUtrustningActionPerformed

    private void btnMinSidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinSidaActionPerformed
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(KvitteraUtForm.this);
        frame.setContentPane(new MinSidaAgentForm(epost, isAdmin));
        frame.revalidate();
        frame.setTitle("Startsida: Agent");
        frame.repaint();
    }//GEN-LAST:event_btnMinSidaActionPerformed
    /**
     * Metod som hämtar och returnerar Agent_ID för inloggad agent via
     * InfDB-metoden fetchSingle, med hjälp av variabeln "epost" som hela tiden
     * skickas med mellan de olika panelerna i systemet.
     *
     * @return
     */
    private int getAgentID() {

        String query = "SELECT Agent_ID FROM mibdb.agent WHERE Epost = '" + epost + "'";
        try {
            String agentIDString = idb.fetchSingle(query);
            return Integer.parseInt(agentIDString);
        } catch (InfException ex) {
            JOptionPane.showMessageDialog(null, "Ett fel uppstod vid hämtning av Agent-ID.");
        }
        return -1;
    }

    /**
     * Metod som hämtar alla värden från kolumnen "Benamning" i tabellen
     * "Utrustning", där Utrustnings_ID också finns i tabellen "teknik", och
     * skapar en ArrayList av dessa via InfDB-metoden fetchColumn(), och sedan
     * genom en for each loop lägger till alla värden från ArrayListan i
     * cbKvitteraTeknik-comboboxen.
     *
     * @return
     */
    private void getAllTeknik() {
        String query = "SELECT benamning "
                + "FROM mibdb.utrustning "
                + "WHERE mibdb.utrustning.Utrustnings_ID IN "
                + "(SELECT mibdb.teknik.Utrustnings_ID "
                + "FROM mibdb.teknik)";

        try {
            ArrayList<String> allTeknik = idb.fetchColumn(query);
            for (String teknik : allTeknik) {
                cbKvitteraTeknik.addItem(teknik);
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Något gick fel vid hämtning av teknik.");

        }
    }

    /**
     * Metod som hämtar alla värden från kolumnen "Benamning" i tabellen
     * "Utrustning", där Utrustnings_ID också finns i tabellen "vapen", och
     * skapar en ArrayList av dessa via InfDB-metoden fetchColumn(), och sedan
     * genom en for each loop lägger till alla värden från ArrayListan i
     * cbKvitteraVapen-comboboxen.
     *
     *
     */
    private void getAllaVapen() {
        String query = "SELECT benamning "
                + "FROM mibdb.utrustning "
                + "WHERE mibdb.utrustning.Utrustnings_ID IN "
                + "(SELECT mibdb.vapen.Utrustnings_ID "
                + "FROM mibdb.vapen)";

        try {
            ArrayList<String> allaVapen = idb.fetchColumn(query);
            for (String vapen : allaVapen) {
                cbKvitteraVapen.addItem(vapen);
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Något gick fel vid hämtning av vapen.");

        }
    }

    /**
     * Metod som hämtar alla värden från kolumnen "Benamning" i tabellen
     * "Utrustning", där Utrustnings_ID också finns i tabellen "kommunikation",
     * och skapar en ArrayList av dessa via InfDB-metoden fetchColumn(), och
     * sedan genom en for each loop lägger till alla värden från ArrayListan i
     * cbKvitteraKomm-comboboxen.
     *
     *
     */
    private void getAllKomm() {
        String query = "SELECT benamning "
                + "FROM mibdb.utrustning "
                + "WHERE mibdb.utrustning.Utrustnings_ID IN "
                + "(SELECT mibdb.kommunikation.Utrustnings_ID "
                + "FROM mibdb.kommunikation)";

        try {
            ArrayList<String> allKomm = idb.fetchColumn(query);
            for (String kom : allKomm) {
                cbKvitteraKomm.addItem(kom);
            }
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Något gick fel vid hämtning av kommunikationsutrustning.");

        }
    }

    /**
     * Metod som utför själva infogandet av data i tabellen innehar_utrustning
     * via InfDB-metoden insert(), med hjälp av Agent_ID som sätts redan när
     * KvitteraUtForm initieras via getAgentID()-metoden, Utrustnings_ID som
     * hämtas via getUtrustningsID()-metoden och Utkvitteringsdatum som skickas
     * med som parameter in i metoden från "kvittera"-knappara.
     *
     * @param datum
     */
    public void kvitteraUtUtrustning(String datum) {
        int utrustningsID = getUtrustningsID();
        String query = "INSERT INTO mibdb.innehar_utrustning (Agent_ID, Utrustnings_ID, Utkvitteringsdatum) "
                + "VALUES (" + agentID + ", " + utrustningsID + ", '" + datum + "')";

        try {
            idb.insert(query);
            JOptionPane.showMessageDialog(null, "Utrustningen har registrerats.");
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Du kan inte kvittera ut samma typ av utrustning flera gånger samma dag. Försök igen.");
        }
    }

    /**
     * Metod som hämtar och returnerar Utrustnings_ID på vald utrustning utifrån
     * dess Benämning, via InfDB- metoden fetchSingle() med hjälp av variabeln
     * "varierande" som är namnet på vald utrustning som ges värde när någon av
     * "kvittera"-knapparna trycks.
     *
     * @return
     */
    private int getUtrustningsID() {
        int utrustningsID = 0;
        String utrustning = varierande;
        String query = "SELECT Utrustnings_ID "
                + "FROM mibdb.utrustning "
                + "WHERE Benamning = '" + utrustning + "'";

        try {
            utrustningsID = Integer.parseInt(idb.fetchSingle(query));
        } catch (NumberFormatException | InfException e) {
            JOptionPane.showMessageDialog(null, "Något gick fel vid hämtning av utrustningsID.");

        }

        return utrustningsID;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnKvitteraKomm;
    private javax.swing.JButton btnKvitteraTeknik;
    private javax.swing.JButton btnKvitteraVapen;
    private javax.swing.JButton btnMinSida;
    private javax.swing.JButton btnUtrustning;
    private javax.swing.JComboBox<String> cbKvitteraKomm;
    private javax.swing.JComboBox<String> cbKvitteraTeknik;
    private javax.swing.JComboBox<String> cbKvitteraVapen;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblDatum;
    private javax.swing.JLabel lblKommunikation;
    private javax.swing.JLabel lblTeknik;
    private javax.swing.JLabel lblVapen;
    private javax.swing.JTextField txtDatum;
    // End of variables declaration//GEN-END:variables
}
