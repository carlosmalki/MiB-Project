/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package mib.p;

import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import oru.inf.InfDB;
import oru.inf.InfException;

/**
 * RegistreraAlienForm är en JPanel-klass för att nyregistrera aliens i
 * databasen, Ras, Plats, och Ansvarig Agent väljs genom comboboxar med förvalda
 * alternativ, överiga uppgifter väljer användaren själv, och dessa valideras
 * innan alien kan registreras.
 *
 * @author ASUS
 */
public class RegisteraAlienForm extends javax.swing.JPanel {

    private static InfDB idb;
    private int alienID;
    private String epost;
    String isAdmin;
    ValideringsKlass validering = new ValideringsKlass();

    /**
     * Creates new form RegisteraForm
     *
     * @param epost
     * @param isAdmin
     */
    public RegisteraAlienForm(String epost, String isAdmin) {
        initComponents();
        try {
            idb = new InfDB("mibdb", "3306", "mibdba", "mibkey");
        } catch (InfException ex) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
            System.out.println("Internt felmeddelande" + ex.getMessage());
        }
        setAlienID();
        fyllAgentComboBox();
        fyllValjPlatsCombo();
        txtNamnReg.requestFocus();
        this.epost = epost;
        this.isAdmin = isAdmin;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnRegistrera = new javax.swing.JButton();
        btnMinSida = new javax.swing.JButton();
        lblRegistreraAlien = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        lblTelefon = new javax.swing.JLabel();
        txtLosenOrdReg = new javax.swing.JTextField();
        lblEpost = new javax.swing.JLabel();
        lblLosenord = new javax.swing.JLabel();
        lblRegDatum = new javax.swing.JLabel();
        txtNamnReg = new javax.swing.JTextField();
        lblPlats = new javax.swing.JLabel();
        lblAnsvarigAgent = new javax.swing.JLabel();
        lblRas = new javax.swing.JLabel();
        txtTelReg = new javax.swing.JTextField();
        cbRas = new javax.swing.JComboBox<>();
        txtEpostReg = new javax.swing.JTextField();
        txtVarierande = new javax.swing.JTextField();
        txtDatumReg = new javax.swing.JTextField();
        lblVarierande = new javax.swing.JLabel();
        lblNamn = new javax.swing.JLabel();
        cbAnsvAgent = new javax.swing.JComboBox<>();
        cbPlats = new javax.swing.JComboBox<>();

        setMaximumSize(new java.awt.Dimension(550, 343));
        setMinimumSize(new java.awt.Dimension(550, 343));
        setPreferredSize(new java.awt.Dimension(550, 343));

        btnRegistrera.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        btnRegistrera.setText("Registrera");
        btnRegistrera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistreraActionPerformed(evt);
            }
        });

        btnMinSida.setBackground(new java.awt.Color(242, 242, 242));
        btnMinSida.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        btnMinSida.setText("Min sida");
        btnMinSida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinSidaActionPerformed(evt);
            }
        });

        lblRegistreraAlien.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        lblRegistreraAlien.setText("Registrera Alien");

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(153, 153, 153), null, null));

        lblTelefon.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblTelefon.setText("Telefon:");

        lblEpost.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblEpost.setText("Epost:");

        lblLosenord.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblLosenord.setText("Lösenord:");

        lblRegDatum.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblRegDatum.setText("Reg-datum(YYYY-MM-DD):");

        lblPlats.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblPlats.setText("Plats:");

        lblAnsvarigAgent.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblAnsvarigAgent.setText("Ansvarig Agent:");

        lblRas.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblRas.setText("Ras:");

        cbRas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Välj ras", "Boglodite\t", "Squid", "Worm" }));
        cbRas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbRasActionPerformed(evt);
            }
        });

        lblVarierande.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        lblNamn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblNamn.setText("Namn:");

        cbAnsvAgent.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Välj agent" }));

        cbPlats.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Välj plats" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblNamn)
                            .addComponent(lblRas))
                        .addGap(124, 124, 124)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtNamnReg, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbRas, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addComponent(lblLosenord)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtLosenOrdReg, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblEpost)
                                .addComponent(lblTelefon)
                                .addComponent(lblVarierande))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtTelReg, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtEpostReg, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblRegDatum)
                                .addComponent(lblAnsvarigAgent)
                                .addComponent(lblPlats))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtDatumReg, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                                .addComponent(cbAnsvAgent, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cbPlats, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addComponent(txtVarierande, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRas)
                    .addComponent(cbRas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNamnReg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNamn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblVarierande)
                    .addComponent(txtVarierande, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTelReg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTelefon))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEpostReg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblEpost))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPlats)
                    .addComponent(cbPlats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAnsvarigAgent)
                    .addComponent(cbAnsvAgent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDatumReg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRegDatum))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLosenord)
                    .addComponent(txtLosenOrdReg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(8, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(227, 227, 227)
                .addComponent(lblRegistreraAlien)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(75, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(69, 69, 69))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnRegistrera)
                        .addGap(117, 117, 117)
                        .addComponent(btnMinSida)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblRegistreraAlien)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnRegistrera)
                    .addComponent(btnMinSida))
                .addGap(351, 351, 351))
        );
    }// </editor-fold>//GEN-END:initComponents
/**
     * Metod kopplad till btnRegistrera som utför själva registeringen efter att
     * först kontrollerat värdena som användaren skrivit i med hjälp av metoder
     * från valideringsklassen, klarar alla värden kontrollen så används
     * InfDB-metoden insert() för att lägga till en ny alien i alien-tabellen,
     * och sedan körts metoden setRas() utifrån vald ras, så det nya Alien_ID
     * hamnar i tabell för rätt ras.
     *
     * @param evt
     */
    private void btnRegistreraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistreraActionPerformed
        String namn = txtNamnReg.getText();
        String eposten = txtEpostReg.getText();
        String telnr = txtTelReg.getText();
        String datum = txtDatumReg.getText();
        String losenord = txtLosenOrdReg.getText();
        testaComboBoxar();

        int ansvAgent = getAnsvAgentID();
        int plats = getPlatsID();
        testaComboBoxar();

        if (!ValideringsKlass.validateTextFieldNotEmpty(namn)) {
            JOptionPane.showMessageDialog(null, "Namnetfältet får inte vara tomt.");
            return;
        }

        if (!ValideringsKlass.validateTextFieldNotEmpty(eposten)) {
            JOptionPane.showMessageDialog(null, "E-postfältet får inte vara tom.");
            return;
        }

        if (!ValideringsKlass.validateTextFieldNotEmpty(telnr)) {
            JOptionPane.showMessageDialog(null, "Telefonnummerfältet får inte vara tomt.");
            return;
        }
        if (!ValideringsKlass.valideraTelefonNummer(telnr)) {
            JOptionPane.showMessageDialog(null, "Felaktigt format. Telefonnumret får innehålla enbart siffor plus max ett bindestreck, som ej får vara på första eller sista plats.");
            return;

        }
        if (!ValideringsKlass.validateTextFieldNotEmpty(datum)) {
            JOptionPane.showMessageDialog(null, "Datumefältet får inte vara tomt.");
            return;
        }

        if (!ValideringsKlass.validateTextFieldNotEmpty(losenord)) {
            JOptionPane.showMessageDialog(null, "Lösenordsfältet får inte vara tomt.");
            return;
        }

        if (!ValideringsKlass.valideraInt(txtVarierande.getText())) {
            JOptionPane.showMessageDialog(null, "Ange heltalssiffror för" + lblVarierande.getText());
            return;
        }

        if (!ValideringsKlass.valideraDatum(datum)) {
            JOptionPane.showMessageDialog(null, "Ange datum enligt format: YYYY-MM-DD.");
            return;
        }

        // Kontrollerar om e-postadressen redan finns registrerad, då E-post används för att unikt identifiera varje Alien.
        if (ValideringsKlass.checkEpost(eposten)) {
            JOptionPane.showMessageDialog(null, "E-postadressen finns redan i databasen.");
            return;
        }

        try {
            idb.insert("INSERT INTO mibdb.alien VALUES (" + alienID + ", '" + datum + "', '" + eposten + "', '" + losenord + "', '" + namn + "', '" + telnr + "', " + plats + ", " + ansvAgent + ")");
            JOptionPane.showMessageDialog(null, "Alien " + namn + " har registrerats i databasen.");
            aterStallComboBoxar();
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Ett fel uppstod vid infogning av data.");
            return;
        }

        String valdRas = cbRas.getSelectedItem().toString();

        if (valdRas.equals("Squid")) {
            setRas("Squid", alienID, "Antal_Armar");
        } else if (valdRas.equals("Worm")) {
            setRas("Worm", alienID, "Langd");
        } else if (valdRas.equals("Boglodite")) {
            setRas("Boglodite", alienID, "Antal_Boogies");
        }

        clearTextFalt();
        setAlienID();
    }//GEN-LAST:event_btnRegistreraActionPerformed
    /**
     * Metod kopplad till btnMinSida som fyller upp JFrame med en ny instans av
     * MinSidaAgentForm för att användaren ska kunna ta sig tillbaka till sin
     * sida, epost och isAdmin skickas med som parametrar för att initialiera en
     * ny "Min Sida", fönster-titeln sätts till "Startida: Agent" och fönstret
     * "målas om" för att visa "Min Sida"-panelen.
     *
     * @param evt
     */
    private void btnMinSidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinSidaActionPerformed
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(RegisteraAlienForm.this);
        frame.setContentPane(new MinSidaAgentForm(epost, isAdmin));
        frame.revalidate();
        frame.setTitle("Startsida: Agent");
        frame.repaint();
    }//GEN-LAST:event_btnMinSidaActionPerformed

    /**
     * Återställer textfälten och comboBoxen.
     */
    private void clearTextFalt() {
        lblVarierande.setText("....");
        txtVarierande.setText("");
        txtNamnReg.setText("");

        txtTelReg.setText("");
        txtLosenOrdReg.setText("");
        txtEpostReg.setText("");
        txtDatumReg.setText("");

        cbRas.setSelectedIndex(0);

    }

    /**
     * Metod som utifrån vald ras sätter värdet för de unika egenskaperna hos
     * varje ras (Antal armar, antal boogies, längd) och via InfDB-metoden
     * insert() lägger in dessa värden i respektive tabell.
     *
     * @param ras
     * @param alienID
     * @param varierandeKolumn
     * @return
     */
    private boolean setRas(String ras, int alienID, String varierandeKolumn) {
        if (!ValideringsKlass.valideraInt(txtVarierande.getText())) {
            JOptionPane.showMessageDialog(null, "Ange " + varierandeKolumn + " med en giltig datatyp.");
            return false;
        }

        try {
            int varierande = Integer.parseInt(txtVarierande.getText());
            String insertQuery = "INSERT INTO mibdb." + ras.toLowerCase() + " (Alien_ID, " + varierandeKolumn + ") VALUES (" + alienID + ", " + varierande + ")";

            idb.insert(insertQuery);
            return true;

        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Ett fel uppstod vid infogning av " + ras + "-raden: " + e.getMessage());
            return false;
        }
    }

    /**
     * Metod som utifrån valt alternativ i cbValjRas sätter ett varierande
     * textfält med aktuell text utifrån de olika ras-egenskaperna.
     *
     * @param evt
     */
    private void cbRasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbRasActionPerformed
        String ras = ((String) cbRas.getSelectedItem()).trim();

        if (ras.equals("Squid")) {
            lblVarierande.setText("Antal armar:");
        } else if (ras.equals("Worm")) {
            lblVarierande.setText("Längd:");
        } else if (ras.equals("Boglodite")) {
            lblVarierande.setText("Antal boogies:");
        }
    }//GEN-LAST:event_cbRasActionPerformed
    /**
     * Metod som genom InfDB-metoden getAutoIncrement väljer ut ett nytt
     * Alien_ID som är ett högre än det för tillfället högsta Alien_ID-värdet i
     * databasen, detta värde omvandlas sedan tll int och sätts som alienID.
     */
    private void setAlienID() {
        try {
            String alienIDStr = idb.getAutoIncrement("alien", "Alien_ID");
            alienID = Integer.parseInt(alienIDStr);

        } catch (InfException e) {

            JOptionPane.showMessageDialog(null, "Ett fel uppstod vid generering av Alien-ID. Vänligen försök igen.");
        }
    }

    /**
     * Metod som fyller upp agent-comboboxen med hjälp av InfDB-metoden
     * fetchColumn, som skapar en arraylist av Namn från tabellen agent, och
     * sedan loopas denna arraylist genom och värdena läggs till i comboboxen.
     */
    private void fyllAgentComboBox() {
        try {
            String query = "SELECT Namn FROM mibdb.agent";
            ArrayList<String> agentNamn = idb.fetchColumn(query);
            for (String namn : agentNamn) {
                cbAnsvAgent.addItem(namn);
            }
        } catch (InfException e) {

        }

    }

    private void fyllValjPlatsCombo() {
        try {
            String query = "SELECT Benamning FROM mibdb.plats";
            ArrayList<String> platser = idb.fetchColumn(query);
            for (String plats : platser) {
                cbPlats.addItem(plats);
            }
        } catch (InfException e) {

        }
    }

    public int getAnsvAgentID() {
        String ansvAgent = "";
        if (!cbAnsvAgent.getSelectedItem().toString().equals("Välj agent")) {
            ansvAgent = cbAnsvAgent.getSelectedItem().toString();
        }
        String query = "SELECT Agent_ID FROM mibdb.agent WHERE Namn = '" + ansvAgent + "';";
        int ansvAgentID = 0;
        try {
            ansvAgentID = Integer.parseInt(idb.fetchSingle(query));
        } catch (InfException e) {

            e.printStackTrace();
        }
        return ansvAgentID;
    }

    public int getPlatsID() {
        String platsNamn = "";
        if (!cbPlats.getSelectedItem().toString().equals("Välj plats")) {
            platsNamn = cbPlats.getSelectedItem().toString();
        }
        String query = "SELECT Plats_ID FROM mibdb.plats WHERE Benamning = '" + platsNamn + "';";
        int platsID = 0;
        try {
            platsID = Integer.parseInt(idb.fetchSingle(query));
        } catch (InfException e) {

            e.printStackTrace();
        }
        return platsID;

    }

    public void aterStallComboBoxar() {
        cbPlats.removeAllItems();
        cbPlats.addItem("Välj plats");
        fyllValjPlatsCombo();
        cbAnsvAgent.removeAllItems();
        cbAnsvAgent.addItem("Välj agent");
        fyllAgentComboBox();

    }

    /**
     * Metod som testar om comboboxarna har något aktivt valt alternativ förutom
     * det förinställda "Välj X", genom en metod i ValideringsKlassen som
     * kontrollerar om det valda alternativet är på index 0 eller inte.
     *
     */
    public void testaComboBoxar() {
        try {
            if (!ValideringsKlass.valideraComboBoxAktivtVal(cbPlats)) {
                throw new NullPointerException();
            }
            if (!ValideringsKlass.valideraComboBoxAktivtVal(cbAnsvAgent)) {
                throw new NullPointerException();
            }
            if (!ValideringsKlass.valideraComboBoxAktivtVal(cbRas)) {
                throw new NullPointerException();
            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "Var god välj ras, plats och ansvarig agent.");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMinSida;
    private javax.swing.JButton btnRegistrera;
    private javax.swing.JComboBox<String> cbAnsvAgent;
    private javax.swing.JComboBox<String> cbPlats;
    private javax.swing.JComboBox<String> cbRas;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblAnsvarigAgent;
    private javax.swing.JLabel lblEpost;
    private javax.swing.JLabel lblLosenord;
    private javax.swing.JLabel lblNamn;
    private javax.swing.JLabel lblPlats;
    private javax.swing.JLabel lblRas;
    private javax.swing.JLabel lblRegDatum;
    private javax.swing.JLabel lblRegistreraAlien;
    private javax.swing.JLabel lblTelefon;
    private javax.swing.JLabel lblVarierande;
    private javax.swing.JTextField txtDatumReg;
    private javax.swing.JTextField txtEpostReg;
    private javax.swing.JTextField txtLosenOrdReg;
    private javax.swing.JTextField txtNamnReg;
    private javax.swing.JTextField txtTelReg;
    private javax.swing.JTextField txtVarierande;
    // End of variables declaration//GEN-END:variables
}
