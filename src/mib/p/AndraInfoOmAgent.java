package mib.p;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import oru.inf.InfDB;
import oru.inf.InfException;

public class AndraInfoOmAgent extends javax.swing.JPanel {

    private static InfDB idb;
    private String epost;
    private String isAdmin;
    private ValideringsKlass validering;

    /**
     * Creates new form AndraInfoOmAgent
     */
    public AndraInfoOmAgent(String epost, String isAdmin) {
        initComponents();
        this.epost = epost;
        this.isAdmin = isAdmin;
        validering = new ValideringsKlass();
        jPaneInfoAgent.setVisible(true);
        try {
            idb = new InfDB("mibdb", "3306", "mibdba", "mibkey");
        } catch (InfException ex) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAndraInfo = new javax.swing.JButton();
        jPaneInfoAgent = new javax.swing.JPanel();
        lblAnstallningsDatum = new javax.swing.JLabel();
        txtNamn = new javax.swing.JTextField();
        lblTelefon = new javax.swing.JLabel();
        txtAnstallningsdatum = new javax.swing.JTextField();
        lblAdminstrator = new javax.swing.JLabel();
        txtTelefon = new javax.swing.JTextField();
        lblNamn = new javax.swing.JLabel();
        txtOmrade = new javax.swing.JTextField();
        txtLosenOrd = new javax.swing.JTextField();
        lblLosenOrd = new javax.swing.JLabel();
        lblOmrade = new javax.swing.JLabel();
        lblNuvarandeInfo = new javax.swing.JLabel();
        txtAndraTelefon = new javax.swing.JTextField();
        txtAdministrator = new javax.swing.JTextField();
        txtAndraLosenOrd = new javax.swing.JTextField();
        lblNyInfo = new javax.swing.JLabel();
        cbValjAdmin = new javax.swing.JComboBox<>();
        cbValjOmrade = new javax.swing.JComboBox<>();
        txtAndraAnstallningsdatum = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        cbValjBokstav = new javax.swing.JComboBox<>();
        btnRensa = new javax.swing.JButton();
        lblAngeAgentID = new javax.swing.JLabel();
        txtAgentID = new javax.swing.JTextField();
        btnSok = new javax.swing.JButton();
        btnMinSida = new javax.swing.JButton();
        btnAdminSida = new javax.swing.JButton();

        btnAndraInfo.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        btnAndraInfo.setText("Ändra");
        btnAndraInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAndraInfoActionPerformed(evt);
            }
        });

        jPaneInfoAgent.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(153, 153, 153), new java.awt.Color(204, 204, 204), null, null));

        lblAnstallningsDatum.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        lblAnstallningsDatum.setText("Anställningsdatum:");

        lblTelefon.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        lblTelefon.setText("Telefon:");

        lblAdminstrator.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        lblAdminstrator.setText("Administratör:");

        lblNamn.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        lblNamn.setText("Namn:");

        lblLosenOrd.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        lblLosenOrd.setText("Lösenord:");

        lblOmrade.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        lblOmrade.setText("Område:");

        lblNuvarandeInfo.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        lblNuvarandeInfo.setText("Nuvarande info");

        lblNyInfo.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        lblNyInfo.setText("Ny info");

        cbValjAdmin.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Välj Administratör", "Ja", "Nej" }));
        cbValjAdmin.setToolTipText("");

        cbValjOmrade.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Välj Område", "Svealand", "Götaland", "Norrland" }));

        jLabel1.setText("Agent");

        cbValjBokstav.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Välj Bokstav", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "Å", "Ä", "Ö" }));

        javax.swing.GroupLayout jPaneInfoAgentLayout = new javax.swing.GroupLayout(jPaneInfoAgent);
        jPaneInfoAgent.setLayout(jPaneInfoAgentLayout);
        jPaneInfoAgentLayout.setHorizontalGroup(
            jPaneInfoAgentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPaneInfoAgentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPaneInfoAgentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPaneInfoAgentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblAnstallningsDatum, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lblTelefon, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lblNamn, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lblAdminstrator, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lblOmrade, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addComponent(lblLosenOrd, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(jPaneInfoAgentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPaneInfoAgentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(txtNamn)
                        .addComponent(txtAnstallningsdatum)
                        .addComponent(txtTelefon)
                        .addComponent(txtAdministrator)
                        .addComponent(txtOmrade, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtLosenOrd, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblNuvarandeInfo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPaneInfoAgentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtAndraTelefon)
                    .addComponent(txtAndraLosenOrd)
                    .addGroup(jPaneInfoAgentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lblNyInfo)
                        .addComponent(cbValjAdmin, 0, 161, Short.MAX_VALUE)
                        .addComponent(cbValjOmrade, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtAndraAnstallningsdatum))
                    .addGroup(jPaneInfoAgentLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbValjBokstav, 0, 117, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPaneInfoAgentLayout.setVerticalGroup(
            jPaneInfoAgentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPaneInfoAgentLayout.createSequentialGroup()
                .addGroup(jPaneInfoAgentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNuvarandeInfo)
                    .addComponent(lblNyInfo))
                .addGap(6, 6, 6)
                .addGroup(jPaneInfoAgentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNamn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNamn)
                    .addComponent(jLabel1)
                    .addComponent(cbValjBokstav, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPaneInfoAgentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAnstallningsdatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAnstallningsDatum)
                    .addComponent(txtAndraAnstallningsdatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPaneInfoAgentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTelefon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTelefon)
                    .addComponent(txtAndraTelefon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(jPaneInfoAgentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAdminstrator)
                    .addComponent(txtAdministrator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbValjAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPaneInfoAgentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtOmrade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblOmrade)
                    .addComponent(cbValjOmrade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPaneInfoAgentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLosenOrd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLosenOrd)
                    .addComponent(txtAndraLosenOrd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnRensa.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        btnRensa.setText("Rensa");
        btnRensa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRensaActionPerformed(evt);
            }
        });

        lblAngeAgentID.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        lblAngeAgentID.setText("Ange Agent ID:");

        btnSok.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        btnSok.setText("Sök");
        btnSok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSokActionPerformed(evt);
            }
        });

        btnMinSida.setBackground(new java.awt.Color(242, 242, 242));
        btnMinSida.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        btnMinSida.setText("Min sida");
        btnMinSida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinSidaActionPerformed(evt);
            }
        });

        btnAdminSida.setBackground(new java.awt.Color(242, 242, 242));
        btnAdminSida.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        btnAdminSida.setText("Adminsida");
        btnAdminSida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdminSidaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(lblAngeAgentID)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtAgentID, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(btnSok))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPaneInfoAgent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(btnAdminSida)
                .addGap(35, 35, 35)
                .addComponent(btnAndraInfo)
                .addGap(18, 18, 18)
                .addComponent(btnRensa)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnMinSida)
                .addGap(22, 22, 22))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAngeAgentID)
                    .addComponent(txtAgentID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSok))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPaneInfoAgent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAndraInfo)
                    .addComponent(btnRensa)
                    .addComponent(btnMinSida)
                    .addComponent(btnAdminSida))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Sök knappen
    private void btnSokActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSokActionPerformed
        String agentIDString = "";
        if (!ValideringsKlass.existerarAgentID(txtAgentID.getText()) && ValideringsKlass.validateTextFieldNotEmpty(txtAgentID.getText())) {
            JOptionPane.showMessageDialog(null, "Valt Agent-ID existerar inte hos MiB. Var god försök igen.");
            return;
        }
        if (ValideringsKlass.validateTextFieldNotEmpty(txtAgentID.getText())) {
            agentIDString = txtAgentID.getText();
        } else {
            JOptionPane.showMessageDialog(null, "Vänligen ange agent ID!");
            return;
        }

        // Omvandlar inmatningen av agent id till int version från String.
        int agentIDInt = Integer.parseInt(agentIDString);

        try {

            // Nuvarande namn
            String namn = idb.fetchSingle("SELECT Namn FROM mibdb.agent WHERE Agent_ID = " + agentIDInt + ";");
            txtNamn.setText(namn);

            // Nuvarande anställningsdatum
            String anstallningsdatum = idb.fetchSingle("SELECT Anstallningsdatum FROM mibdb.agent WHERE Agent_ID = " + agentIDInt + ";");
            txtAnstallningsdatum.setText(anstallningsdatum);

            // Nuvarande telefon 
            String telefon = idb.fetchSingle("SELECT Telefon FROM mibdb.agent WHERE Agent_ID = " + agentIDInt + ";");
            txtTelefon.setText(telefon);

            // Nuvarande administratör 
            String administrator = idb.fetchSingle("SELECT Administrator FROM mibdb.agent WHERE Agent_ID = " + agentIDInt + ";");
            txtAdministrator.setText(administrator);

            // Nuvarande Område 
            String omradeString = idb.fetchSingle("SELECT Omrade FROM mibdb.agent WHERE Agent_ID = " + agentIDInt + ";");
            // Omvandlade område id till int från String.
            int omradeInt = Integer.parseInt(omradeString);
            txtOmrade.setText(idb.fetchSingle("SELECT Benamning FROM mibdb.omrade WHERE Omrades_ID =" + omradeInt + ";"));

            // Nuvarande lösenord
            String losenord = idb.fetchSingle("SELECT Losenord from mibdb.agent WHERE Agent_ID = " + agentIDInt + ";");
            txtLosenOrd.setText(losenord);

            // Fånga fel med catch clause.
        } catch (InfException ex) {
            Logger.getLogger(AndraInfoOmAgent.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Något gick fel. Försök igen!");
        }


    }//GEN-LAST:event_btnSokActionPerformed
    // Denna knapp rensar allt som finns i textfälten 
    private void btnRensaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRensaActionPerformed
        txtAdministrator.setText("");
        txtAgentID.setText("");
        txtAndraAnstallningsdatum.setText("");
        txtAndraLosenOrd.setText("");
        txtAndraTelefon.setText("");
        txtAnstallningsdatum.setText("");
        txtLosenOrd.setText("");
        txtNamn.setText("");
        txtOmrade.setText("");
        txtTelefon.setText("");
        txtAgentID.requestFocus();
        // jComboboxen omställs. 
        cbValjBokstav.setSelectedIndex(0);
        cbValjAdmin.setSelectedIndex(0);
        cbValjOmrade.setSelectedIndex(0);


    }//GEN-LAST:event_btnRensaActionPerformed
    /**
     * Metod kopplad till btnAndraInfo som genom metoder från valideringsklassen
     * testar all input från användaren och sedan utfrån det antingen ger
     * felmeddelande eller fortsätter med de olika metoderna för att utföra
     * ändringarna.
     *
     * @param evt
     */
    private void btnAndraInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAndraInfoActionPerformed

        String agentIDString = "";
        int agentIDInt = 0;
        if (ValideringsKlass.validateTextFieldNotEmpty(txtAgentID.getText())) {
            agentIDString = txtAgentID.getText();
            agentIDInt = Integer.parseInt(agentIDString);
        } else {
            JOptionPane.showMessageDialog(null, "Vänligen ange agent ID!");
            return;
        }
        if (ValideringsKlass.validateTextFieldNotEmpty(txtAndraLosenOrd.getText())) {
            andraLosenOrd(agentIDInt);
        }
        if (ValideringsKlass.validateTextFieldNotEmpty(txtAndraTelefon.getText())) {
            andraTelefon(agentIDInt);
        }
        if (ValideringsKlass.validateTextFieldNotEmpty(txtAndraAnstallningsdatum.getText())) {
            andraAnstDatum(agentIDInt);
        }
        if (ValideringsKlass.valideraComboBoxAktivtVal(cbValjAdmin)) {
            andraAdminStatus(agentIDInt);
        }

        if (ValideringsKlass.valideraComboBoxAktivtVal(cbValjOmrade)) {
            andraOmrade(agentIDInt);
        }
        if (ValideringsKlass.valideraComboBoxAktivtVal(cbValjAdmin)) {
            andraNamn(agentIDInt);
        }

        if (ValideringsKlass.valideraComboBoxAktivtVal(cbValjBokstav)) {
            andraNamn(agentIDInt);
        }


    }//GEN-LAST:event_btnAndraInfoActionPerformed
    /**
     * Metod som genom InfDB-metoden update() uppdaterar kolumnen Losenord i
     * alien-tabellen där aktuellt Agent_ID hittas, txtLosenord sätts sedan till
     * det nyta lösenordet, och txtAndraLosenOrd återställs till "".
     *
     * @param agentID
     */

    public void andraLosenOrd(int agentID) {
        String nyttLosenOrd = txtAndraLosenOrd.getText();
        {

            try {
                String query = "UPDATE mibdb.agent SET Losenord = '" + nyttLosenOrd + "' WHERE Agent_ID = '" + agentID + "'";
                idb.update(query);
                JOptionPane.showMessageDialog(null, "Lösenordet uppdaterades. Nytt lösenord: " + nyttLosenOrd);
                txtLosenOrd.setText(nyttLosenOrd);
                txtAndraLosenOrd.setText("");
            } catch (InfException e) {
                JOptionPane.showMessageDialog(null, "Lösenord för långt. Välj max sex tecken.");
            }
        }

    }

    /**
     * Metod som genom InfDB-metoden update() uppdaterar kolumnen telefon i
     * alien-tabellen där aktuellt Agent_ID hittas, efter att inputen validerats
     * som telefonnummer genom ValideringKlass-metoden valideraTelefonNummer(),
     * txtTelefon sätts sedan till det nyta telefonnumret, och txtAndraTelefon
     * återställs till "".
     *
     * @param agentID
     */
    public void andraTelefon(int agentID) {
        String nyttNummer = "";
        if (ValideringsKlass.valideraTelefonNummer(txtAndraTelefon.getText())) {
            nyttNummer = txtAndraTelefon.getText();
        } else {
            JOptionPane.showMessageDialog(null, "Ogiltigt telefonnummer. Telefonnummer får enbart innehålla siffor och max ett bindestreck. Försök igen.");
            return;
        }

        try {
            String query = "UPDATE mibdb.agent SET Telefon = '" + nyttNummer + "' WHERE Agent_ID = '" + agentID + "'";
            idb.update(query);
            JOptionPane.showMessageDialog(null, "Numret uppdaterades. Nytt nummer: " + nyttNummer);
            txtTelefon.setText(nyttNummer);
            txtAndraTelefon.setText("");
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Ett fel inträffade vid uppdatering av telfonnummer.");
        }

    }

    /**
     * Metod som först kontrollerar att inskrivet datum är ett godkänt sådant,
     * genom valideringsklass-metoden valideraDatum(), och sedan använder
     * InfDB-metoden update() för att uppdatera anställningssdatum för den agent
     * där aktuellt Agent_ID hittas, txtAnstallningsdatum sätts med nytt datum
     * och txtAndraAnstallningsdatum återställs till "".
     *
     * @param agentID
     */
    public void andraAnstDatum(int agentID) {
        String nyttAnstDatum = txtAndraAnstallningsdatum.getText();
        if (ValideringsKlass.valideraDatum(nyttAnstDatum)) {
            try {
                String query = "UPDATE mibdb.agent SET Anstallningsdatum = '" + nyttAnstDatum + "' WHERE Agent_ID = '" + agentID + "'";
                idb.update(query);
                JOptionPane.showMessageDialog(null, "Anställningsdatum uppdaterades. Nytt datum: " + nyttAnstDatum);
                txtAnstallningsdatum.setText(nyttAnstDatum);
                txtAndraAnstallningsdatum.setText("");
            } catch (InfException e) {
                JOptionPane.showMessageDialog(null, " Ogiltigt anställningssdatum. Ange datum enligt YYYY-MM-DD");
            }

        } else {
            JOptionPane.showMessageDialog(null, " Ogiltigt anställningsdatum. Ange datum enligt YYYY-MM-DD");
        }
    }

    /**
     * Metod som uppdaterar admin-status hos den agent där akuellt Agent_ID
     * hittas, genom InfDB-metoden update(), metoden tar texten från comboboxen,
     * och sätter status till J om texten är "Ja" och annars till "Nej", då Ja
     * och Nej är de enda aktiva val som kan göras i dena box.
     *
     * @param agentID
     */

    public void andraAdminStatus(int agentID) {
        String adminStatus = "";
        if (cbValjAdmin.getSelectedItem().toString().equals("Ja")) {
            adminStatus = "J";
        } else {
            adminStatus = "N";
        }

        try {
            String query = "UPDATE mibdb.agent SET Administrator = '" + adminStatus + "' WHERE Agent_ID = '" + agentID + "'";
            idb.update(query);
            JOptionPane.showMessageDialog(null, "Adminstatus uppdaterades.");
            txtAdministrator.setText(adminStatus);
            cbValjAdmin.setSelectedIndex(0);
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, " Något gick fel med uppdatering av adminstatus.");
        }

    }

    /**
     * Metod som genom InfDB-metoden update() uppdaterar kolumen Omrade i
     * agent-tabellen där aktuellt Agent_ID hittas,txtOmrade sätts med namnet på
     * det nya området och cbValjOmrade återställs till index 0 ("Välj område").
     *
     * @param agentID
     */

    public void andraOmrade(int agentID) {
        int omrade = getOmradesID();
        try {
            String query = "UPDATE mibdb.agent SET Omrade = '" + omrade + "' WHERE Agent_ID = '" + agentID + "'";
            idb.update(query);
            JOptionPane.showMessageDialog(null, "Område uppdaterades.");
            txtOmrade.setText(cbValjOmrade.getSelectedItem().toString());
            cbValjOmrade.setSelectedIndex(0);
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, " Något gick fel med uppdatering av område.");
        }

    }

    /**
     * Metod som genom InfDB-metoden update() uppdaterar kolumnen Namn i
     * agent-tabellen där aktuellt Agent_ID hittas,txtNamn sätts till till det
     * nya namnet, och cbValjBokstav återställs till index 0 ("Välj bokstav").
     *
     * @param agentID
     */
    public void andraNamn(int agentID) {
        String nyttNamn = "Agent " + cbValjBokstav.getSelectedItem().toString();
        try {
            String query = "UPDATE mibdb.agent SET Namn = '" + nyttNamn + "' WHERE Agent_ID = '" + agentID + "'";
            idb.update(query);
            JOptionPane.showMessageDialog(null, "Agentens namn uppdaterades.");
            txtNamn.setText(nyttNamn);
            cbValjBokstav.setSelectedIndex(0);
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, " Något gick fel med uppdatering av agentens namn.");
        }

    }

    /**
     * Metod som hämtar ut Omrades_ID från området valt i cbOmrade-comboboxen
     * via InfDB-metoden fetchSingle, och sedan returnerar det i form av ett
     * int-värde efter att först ha använt Integer.parseInt på hämtat värde.
     *
     * @return
     */
    public int getOmradesID() {
        String omrade = cbValjOmrade.getSelectedItem().toString();
        String query = "SELECT Omrades_ID FROM mibdb.omrade WHERE Benamning = '" + omrade + "';";
        int omradesID = 0;

        try {
            omradesID = Integer.parseInt(idb.fetchSingle(query));

        } catch (InfException e) {

            JOptionPane.showMessageDialog(null, "Ett fel uppstod vid hämtning av Områdes-ID.");
        }

        return omradesID;
    }

// Denna knapp skickar en till AdminSidan. "AdminFunktionerForm".
    private void btnAdminSidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdminSidaActionPerformed
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(AndraInfoOmAgent.this);
        frame.setContentPane(new AdminFunktionerForm(epost, isAdmin));
        frame.revalidate();
        frame.setTitle("Administratörsfunktioner");
        frame.repaint();
    }//GEN-LAST:event_btnAdminSidaActionPerformed
    // Denna knapp skickar en till AgentSidan. "MinSidaAgentForm".
    private void btnMinSidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinSidaActionPerformed
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(AndraInfoOmAgent.this);
        frame.setContentPane(new MinSidaAgentForm(epost, isAdmin));
        frame.revalidate();
        frame.setTitle("Startsida: Agent");
        frame.repaint();
    }//GEN-LAST:event_btnMinSidaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdminSida;
    private javax.swing.JButton btnAndraInfo;
    private javax.swing.JButton btnMinSida;
    private javax.swing.JButton btnRensa;
    private javax.swing.JButton btnSok;
    private javax.swing.JComboBox<String> cbValjAdmin;
    private javax.swing.JComboBox<String> cbValjBokstav;
    private javax.swing.JComboBox<String> cbValjOmrade;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPaneInfoAgent;
    private javax.swing.JLabel lblAdminstrator;
    private javax.swing.JLabel lblAngeAgentID;
    private javax.swing.JLabel lblAnstallningsDatum;
    private javax.swing.JLabel lblLosenOrd;
    private javax.swing.JLabel lblNamn;
    private javax.swing.JLabel lblNuvarandeInfo;
    private javax.swing.JLabel lblNyInfo;
    private javax.swing.JLabel lblOmrade;
    private javax.swing.JLabel lblTelefon;
    private javax.swing.JTextField txtAdministrator;
    private javax.swing.JTextField txtAgentID;
    private javax.swing.JTextField txtAndraAnstallningsdatum;
    private javax.swing.JTextField txtAndraLosenOrd;
    private javax.swing.JTextField txtAndraTelefon;
    private javax.swing.JTextField txtAnstallningsdatum;
    private javax.swing.JTextField txtLosenOrd;
    private javax.swing.JTextField txtNamn;
    private javax.swing.JTextField txtOmrade;
    private javax.swing.JTextField txtTelefon;
    // End of variables declaration//GEN-END:variables
}
