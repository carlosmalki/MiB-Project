/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package mib.p;

import javax.swing.JOptionPane;
import oru.inf.InfDB;
import oru.inf.InfException;
import java.util.HashMap;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ASUS
 */
public class SokFunktionerForm extends javax.swing.JPanel {

    private static InfDB idb;
    private String epost;
    private String isAdmin;
    private String sokMetod;
    public boolean datumSok;

    /**
     * Creates new form testFormTabell
     */
    public SokFunktionerForm(String epost, String isAdmin) {
        initComponents();

        try {
            idb = new InfDB("mibdb", "3306", "mibdba", "mibkey");
        } catch (InfException ex) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
            System.out.println("Internt felmeddelande" + ex.getMessage());
        }
        jTable1.setVisible(false);
        this.epost = epost;
        this.isAdmin = isAdmin;
        doljSokFalt();
        doljDatumSok();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cbValj = new javax.swing.JComboBox<>();
        btnSokKnapp = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnMinSida = new javax.swing.JButton();
        btnSokPlats = new javax.swing.JButton();
        btnSokRas = new javax.swing.JButton();
        btnValjDatumSok = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtFranDatum = new javax.swing.JTextField();
        lblDatumSok = new javax.swing.JLabel();
        lblFran = new javax.swing.JLabel();
        lblTill = new javax.swing.JLabel();
        btnDatumSok = new javax.swing.JButton();
        txtTillDatum = new javax.swing.JTextField();
        btnIdSok = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(550, 343));
        setMinimumSize(new java.awt.Dimension(550, 343));
        setName(""); // NOI18N

        jLabel1.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        jLabel1.setText("Sök ras:");

        cbValj.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " " }));

        btnSokKnapp.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        btnSokKnapp.setText("Sök");
        btnSokKnapp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSokKnappActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Alien ID", "Namn"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        btnMinSida.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        btnMinSida.setText("Min sida");
        btnMinSida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinSidaActionPerformed(evt);
            }
        });

        btnSokPlats.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        btnSokPlats.setText("Plats");
        btnSokPlats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSokPlatsActionPerformed(evt);
            }
        });

        btnSokRas.setFont(new java.awt.Font("MS PGothic", 1, 14)); // NOI18N
        btnSokRas.setText("Ras");
        btnSokRas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSokRasActionPerformed(evt);
            }
        });

        btnValjDatumSok.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        btnValjDatumSok.setText("Datum");
        btnValjDatumSok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnValjDatumSokActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        jLabel2.setText("Sökmetod:");

        lblDatumSok.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        lblDatumSok.setText("Datumsök:");

        lblFran.setText("Från:");

        lblTill.setText("Till:");

        btnDatumSok.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        btnDatumSok.setText("Sök");
        btnDatumSok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDatumSokActionPerformed(evt);
            }
        });

        btnIdSok.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        btnIdSok.setText("Id-sök");
        btnIdSok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIdSokActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cbValj, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(btnSokKnapp)
                .addGap(73, 73, 73))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnSokPlats, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(btnSokRas, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel2))
                    .addComponent(btnValjDatumSok, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnIdSok, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(51, 51, 51)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnMinSida, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblDatumSok)
                    .addComponent(lblFran)
                    .addComponent(lblTill)
                    .addComponent(btnDatumSok, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtFranDatum)
                    .addComponent(txtTillDatum))
                .addGap(33, 33, 33))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(btnSokPlats)
                .addGap(18, 18, 18)
                .addComponent(btnSokRas)
                .addGap(18, 18, 18)
                .addComponent(btnValjDatumSok)
                .addGap(18, 18, 18)
                .addComponent(btnIdSok)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbValj, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(btnSokKnapp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblDatumSok)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblFran)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFranDatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addComponent(lblTill)
                        .addGap(12, 12, 12)
                        .addComponent(txtTillDatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDatumSok)
                        .addGap(40, 40, 40)
                        .addComponent(btnMinSida)))
                .addGap(16, 16, 16))
        );
    }// </editor-fold>//GEN-END:initComponents
  /**
     * Metod som utifrån texten på fältet sokMetod, kör anting sokRas()-metoden
     * eller sokPlats()-metoden för att ge relevanta resultat, efter att 
     * först ha testat cbValj boxen så att ett aktivt val har gjorts, genom metod
     * från ValiderinsKlass.
     *
     * @param evt
     */
    private void btnSokKnappActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSokKnappActionPerformed

        if (ValideringsKlass.valideraComboBoxAktivtVal(cbValj)) {
            if (sokMetod.equals("Ras")) {
                sokRas();
            }
            if (sokMetod.equals("Plats")) {
                sokPlats();
            }
        } else {

            JOptionPane.showMessageDialog(null, "Var god välj sökobjekt.");
        }

    }//GEN-LAST:event_btnSokKnappActionPerformed

    private void btnMinSidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinSidaActionPerformed
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(SokFunktionerForm.this);
        frame.setContentPane(new MinSidaAgentForm(epost, isAdmin));
        frame.revalidate();
        frame.setTitle("Startsida: Agent");
        frame.repaint();
    }//GEN-LAST:event_btnMinSidaActionPerformed
    /**
     * Metod som (om synligt) döljer sökfälten för datumsökning, och istället
     * visar fälten för plats-och ras sök, och sätter texterna så att det passar
     * vald sökmetod.
     *
     * @param evt
     */
    private void btnSokRasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSokRasActionPerformed
        sokMetod = "Ras";
        doljDatumSok();
        cbValj.setVisible(true);
        jLabel1.setText("Sök alien av ras:");
        jLabel1.setVisible(true);
        visaSokKnapp();
        fyllComboBoxRas();
    }//GEN-LAST:event_btnSokRasActionPerformed
    /**
     * Metod som (om synligt) döljer sökfälten för datumsökning, och istället
     * visar fälten för plats-och ras sök, och sätter texterna så att det passar
     * vald sökmetod.
     *
     * @param evt
     */
    private void btnSokPlatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSokPlatsActionPerformed
        doljDatumSok();
        sokMetod = "Plats";

        cbValj.setVisible(true);
        jLabel1.setVisible(true);
        jLabel1.setText("Sök alien i:");
        visaSokKnapp();
        fyllComboBoxPlats();
    }//GEN-LAST:event_btnSokPlatsActionPerformed
    /**
     * Metod kopplad till val-knappen för Datumsök, som (om synliga) döljer
     * sökfälten för ras och plats, och istället visar datum-sökfälten.
     *
     * @param evt
     */
    private void btnValjDatumSokActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnValjDatumSokActionPerformed
        doljSokFalt();
        visaDatumSok();
    }//GEN-LAST:event_btnValjDatumSokActionPerformed
    /**
     * Metod kopplad till btnDatumSok,som när den trycks kör metoden datumSok().
     *
     * @param evt
     */
    private void btnDatumSokActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDatumSokActionPerformed
        datumSok();
    }//GEN-LAST:event_btnDatumSokActionPerformed

    private void btnIdSokActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIdSokActionPerformed
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(SokFunktionerForm.this);
        frame.setContentPane(new AlienSokForm(epost, isAdmin));
        frame.revalidate();
        frame.setTitle("Id-Sök");
        frame.repaint();
    }//GEN-LAST:event_btnIdSokActionPerformed
    /**
     * Metod som först anpassar SQL-query efter vald ras, och sedan anpassar
     * jTable1-tabellen med hjälp av DefaultTableModel, så att den kan fyllas på
     * dynamiskt med både kolumner och rader som passar den aktuella sökningen,
     * via InfDB-metoden fetchRows skapas en ArrayList fylld med HashMaps, och
     * denna ArrayList loopas sedan igenom och för varje HashMap i listan läggs
     * värdena för nycklarna "Alien_ID" och "Namn" till i tabellen, som sedan
     * görs synlig.
     */
    private void sokRas() {
        String ras = (String) cbValj.getSelectedItem();

        if (ras.equals("Squid") || ras.equals("Worm") || ras.equals("Boglodite")) {
            try {
                DefaultTableModel model = new DefaultTableModel();
                model.setColumnIdentifiers(new Object[]{"Alien ID", "Namn"});
                jTable1.setModel(model);

                ArrayList<HashMap<String, String>> alienInfo;
                String query;

                if (ras.equals("Squid")) {
                    query = "SELECT mibdb.alien.Alien_ID, namn FROM mibdb.alien WHERE mibdb.alien.Alien_ID IN (SELECT mibdb.squid.Alien_ID FROM mibdb.squid)";
                } else if (ras.equals("Worm")) {
                    query = "SELECT mibdb.alien.Alien_ID, namn FROM mibdb.alien WHERE mibdb.alien.Alien_ID IN (SELECT mibdb.worm.Alien_ID FROM mibdb.worm)";
                } else { // Boglodite
                    query = "SELECT mibdb.alien.Alien_ID, namn FROM mibdb.alien WHERE mibdb.alien.Alien_ID IN (SELECT mibdb.boglodite.Alien_ID FROM mibdb.boglodite)";
                }

                alienInfo = idb.fetchRows(query);

                for (HashMap<String, String> item : alienInfo) {
                    String alienId = item.get("Alien_ID");
                    String namn = item.get("Namn");
                    model.addRow(new Object[]{alienId, namn});
                }
            } catch (InfException e) {
                JOptionPane.showMessageDialog(null, "Ett fel inträffade vid hämtning av data.");
            }

            jTable1.setVisible(true);

        }

    }

    /**
     * Metod där jTable1-tabellen anpassas med hjälp av DefaultTableModel, så
     * att den kan fyllas på dynamiskt med både kolumner och rader som passar
     * den aktuella sökningen, via InfDB-metoden fetchRows skapas en ArrayList
     * fylld med HashMaps, och denna ArrayList loopas sedan igenom och för varje
     * HashMap i listan läggs värdena för nycklarna "Alien_ID" och "Namn" till i
     * tabellen, som sedan görs synlig.
     *
     */
    private void sokPlats() {
        String plats = cbValj.getSelectedItem().toString();
        ArrayList<HashMap<String, String>> alienLista;
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(new Object[]{"Alien ID", "Namn"});
        jTable1.setModel(model);
        try {
            String fraga = "SELECT mibdb.alien.namn, mibdb.alien.alien_id "
                    + "FROM mibdb.alien "
                    + "JOIN mibdb.plats ON mibdb.alien.plats = mibdb.plats.plats_id "
                    + "WHERE mibdb.plats.BENAMNING = '" + plats + "'";
            alienLista = idb.fetchRows(fraga);
            for (HashMap<String, String> item : alienLista) {
                String alienId = item.get("Alien_ID");
                String namn = item.get("Namn");
                model.addRow(new Object[]{alienId, namn});
                jTable1.setVisible(true);

            }
        } catch (InfException ex) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
        } catch (NullPointerException npe) {

        }

    }

    /**
     * Metod som först tömmer cbValj-comboboxen, och sedan fyller upp den med
     * platsnamn med hjälp av InfDB-metoden fetchColumn() som skapar en
     * ArrayList av platsnamnen, som sedan iterereras igenom och varje plats får
     * en rad i comboboxen.
     */
    private void fyllComboBoxPlats() {
        ArrayList<String> platser;
        try {
            platser = idb.fetchColumn("SELECT Benamning from mibdb.plats");
            cbValj.removeAllItems();
            cbValj.addItem("Välj plats");
            for (String enPlats : platser) {
                cbValj.addItem(enPlats);
            }
        } catch (InfException ex) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
        }

    }

    /**
     * Metod som sökknappen synlig när metod har valts.
     *
     */
    private void visaSokKnapp() {
        btnSokKnapp.setVisible(true);
        btnSokKnapp.setEnabled(true);
    }

    /**
     * Metod som först tömmer cbValj-comboxen och sedan fyller upp dem med namn
     * på alien-raserna, när ras-sökfuktionen valts.
     */
    private void fyllComboBoxRas() {
        cbValj.removeAllItems();
        cbValj.addItem("Välj ras");
        cbValj.addItem("Boglodite");
        cbValj.addItem("Squid");
        cbValj.addItem("Worm");

    }

    /**
     * Metod som döljer fälten för datumsökning innan den metoden valts, eller
     * när annan sökmetod är vald.
     */
    private void doljDatumSok() {

        lblFran.setVisible(false);
        lblTill.setVisible(false);
        btnDatumSok.setVisible(false);
        lblDatumSok.setVisible(false);
        txtTillDatum.setVisible(false);
        txtFranDatum.setVisible(false);

    }

    /**
     * Metod som visar fälten för datumsökning, när den metoden valts.
     */
    private void visaDatumSok() {

        lblFran.setVisible(true);
        lblTill.setVisible(true);
        btnDatumSok.setVisible(true);
        lblDatumSok.setVisible(true);
        txtTillDatum.setVisible(true);
        txtFranDatum.setVisible(true);

    }

    public void datumSok() {
        try {

            // Datum 1 och 2 från txtfälten.
            String Datum1 = txtFranDatum.getText();
            String Datum2 = txtTillDatum.getText();

            if (Datum1.contains("-") && Datum2.contains("-")) {

                DefaultTableModel model = new DefaultTableModel();
                model.setColumnIdentifiers(new Object[]{"Alien ID", "Namn", "Registreringsdatum"});
                jTable1.setModel(model);

                ArrayList<HashMap<String, String>> rows;
                String query;

                query = ("SELECT mibdb.alien.Alien_ID, mibdb.alien.Namn, mibdb.alien.Registreringsdatum FROM mibdb.alien WHERE "
                        + "Registreringsdatum BETWEEN '" + Datum1 + "' AND '" + Datum2 + "' ORDER BY Registreringsdatum ");

                rows = idb.fetchRows(query);

                for (HashMap<String, String> item : rows) {
                    String alienId = item.get("Alien_ID");
                    String namn = item.get("Namn");
                    String registreringsdatum = item.get("Registreringsdatum");
                    model.addRow(new Object[]{alienId, namn, registreringsdatum});
                }

            } else {
                JOptionPane.showMessageDialog(null, "Vara god ange datum enligt format: YYYY-MM-DD");
            }

            jTable1.setVisible(true);
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Vara god ange datum enligt format: YYYY-MM-DD");

        }

    }

    /**
     * Metod som döljer sökfälten innan användare valt sökmetod.
     */
    private void doljSokFalt() {
        cbValj.setVisible(false);
        jLabel1.setVisible(false);
        btnSokKnapp.setVisible(false);
        btnSokKnapp.setEnabled(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDatumSok;
    private javax.swing.JButton btnIdSok;
    private javax.swing.JButton btnMinSida;
    private javax.swing.JButton btnSokKnapp;
    private javax.swing.JButton btnSokPlats;
    private javax.swing.JButton btnSokRas;
    private javax.swing.JButton btnValjDatumSok;
    private javax.swing.JComboBox<String> cbValj;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblDatumSok;
    private javax.swing.JLabel lblFran;
    private javax.swing.JLabel lblTill;
    private javax.swing.JTextField txtFranDatum;
    private javax.swing.JTextField txtTillDatum;
    // End of variables declaration//GEN-END:variables
}
