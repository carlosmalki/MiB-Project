/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package mib.p;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import oru.inf.InfDB;
import oru.inf.InfException;
import java.util.ArrayList;

/**
 * Klassen SeDinUtrustningForm är en jPanel som används för att visa information
 * om vilken utrustning en viss användare för tillfället har utkvitterad och ge
 * denne användare lite kort information om varje utrustning.
 *
 * @author ASUS
 */
public class SeDinUtrustningForm extends javax.swing.JPanel {

    private String epost;
    private String isAdmin;
    private static InfDB idb;
    private int agentID;
    private ArrayList<String> allUtrustning;
    private ArrayList<String> vapen;
    private ArrayList<String> teknik;
    private ArrayList<String> kommunikation;
    private String vapenNamn;
    private String teknikNamn;
    private String kommNamn;

    /**
     * Creates new form SeDinUtrustningForm
     */
    public SeDinUtrustningForm(String epost, String isAdmin) {
        initComponents();
        try {
            idb = new InfDB("mibdb", "3306", "mibdba", "mibkey");
        } catch (InfException ex) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
            System.out.println("Internt felmeddelande" + ex.getMessage());
        }

        this.epost = epost;
        this.isAdmin = isAdmin;
        agentID = getAgentID();

        getAllUtrustning();
        getVapenNamn();
        getTeknikNamn();
        getKommunikationNamn();
        lblVarierande.setText("Info:");
        lblVarierande.setVisible(false);
        txtVarierande.setVisible(true);
        txtUtKvittDatum.setVisible(true);
        lblUtkvitterad.setVisible(false);

        lblVarierande2.setVisible(false);

        fyllVapenComboBox();
        fyllTeknikComboBox();
        fyllKommunikationComboBox();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnMinSida = new javax.swing.JButton();
        lblUtrustning = new javax.swing.JLabel();
        cbTeknik = new javax.swing.JComboBox<>();
        cbKommunikation = new javax.swing.JComboBox<>();
        lblVapen = new javax.swing.JLabel();
        lblTeknik = new javax.swing.JLabel();
        lblKommunikation = new javax.swing.JLabel();
        btnVapenInfo = new javax.swing.JButton();
        btnTeknikInfo = new javax.swing.JButton();
        btnKommInfo = new javax.swing.JButton();
        txtVarierande = new javax.swing.JTextField();
        txtUtKvittDatum = new javax.swing.JTextField();
        lblVarierande = new javax.swing.JLabel();
        lblVarierande2 = new javax.swing.JLabel();
        lblUtkvitterad = new javax.swing.JLabel();
        btnRegistreraUtrustning = new javax.swing.JButton();
        cbVapen = new javax.swing.JComboBox<>();

        setFocusTraversalPolicyProvider(true);
        setMaximumSize(new java.awt.Dimension(550, 343));
        setMinimumSize(new java.awt.Dimension(550, 343));

        btnMinSida.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        btnMinSida.setText("Min sida");
        btnMinSida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinSidaActionPerformed(evt);
            }
        });

        lblUtrustning.setFont(new java.awt.Font("MS Gothic", 1, 24)); // NOI18N
        lblUtrustning.setText("Din utkvitterade utrustning:");

        lblVapen.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        lblVapen.setText("Vapen:");

        lblTeknik.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        lblTeknik.setText("Teknik:");

        lblKommunikation.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        lblKommunikation.setText("Kommunikation:");

        btnVapenInfo.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        btnVapenInfo.setText("Visa info");
        btnVapenInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVapenInfoActionPerformed(evt);
            }
        });

        btnTeknikInfo.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        btnTeknikInfo.setText("Visa info");
        btnTeknikInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTeknikInfoActionPerformed(evt);
            }
        });

        btnKommInfo.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        btnKommInfo.setText("Visa info");
        btnKommInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKommInfoActionPerformed(evt);
            }
        });

        lblVarierande.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        lblVarierande.setText("Varierande");

        lblVarierande2.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        lblVarierande2.setText("Varierande:");

        lblUtkvitterad.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        lblUtkvitterad.setText("Utkvitterad:");

        btnRegistreraUtrustning.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        btnRegistreraUtrustning.setText("Registrera utrustning");
        btnRegistreraUtrustning.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistreraUtrustningActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblUtkvitterad)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtUtKvittDatum, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(lblVarierande2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtVarierande, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(135, 135, 135)
                        .addComponent(lblVarierande)))
                .addGap(102, 102, 102)
                .addComponent(btnMinSida)
                .addGap(31, 31, 31))
            .addGroup(layout.createSequentialGroup()
                .addGap(112, 112, 112)
                .addComponent(lblUtrustning)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(169, 169, 169)
                        .addComponent(btnRegistreraUtrustning, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblKommunikation)
                                    .addComponent(lblTeknik))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cbKommunikation, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cbTeknik, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(68, 68, 68)
                                .addComponent(lblVapen)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbVapen, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnKommInfo)
                                    .addComponent(btnTeknikInfo)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(btnVapenInfo)))))
                .addContainerGap(109, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(lblUtrustning)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblVapen)
                    .addComponent(btnVapenInfo)
                    .addComponent(cbVapen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTeknik)
                    .addComponent(cbTeknik, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTeknikInfo))
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblKommunikation)
                    .addComponent(cbKommunikation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnKommInfo))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(btnRegistreraUtrustning)
                        .addGap(18, 18, 18)
                        .addComponent(lblVarierande)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtVarierande, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblVarierande2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblUtkvitterad)
                            .addComponent(txtUtKvittDatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnMinSida)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
   /**
     * Metod kopplad till btnMinSida som fyller upp JFrame med en ny instans av
     * MinSidaAgentForm för att användaren ska kunna ta sig tillbaka till sin
     * sida, epost och isAdmin skickas med som parametrar för att initialiera en
     * ny "Min Sida", fönster-titeln sätts till "Startida: Agent" och fönstret
     * "målas om" för att visa "Min Sida"-panelen.
     *
     * @param evt
     */
    private void btnMinSidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinSidaActionPerformed
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(SeDinUtrustningForm.this);
        frame.setContentPane(new MinSidaAgentForm(epost, isAdmin));
        frame.revalidate();
        frame.setTitle("Startsida: Agent");
        frame.repaint();
    }//GEN-LAST:event_btnMinSidaActionPerformed
    /**
     * Metod kopplad till btnVapenInfo som sätter varierande textfält och labels
     * till lämpliga värden med hjälp av metoderna setUtkvittDatum() och
     * setKaliber() baserat på valt alternativ i jComboVapen, och visar sedan
     * informationen med visaInfo()-metoden.
     *
     * @param evt
     */
    private void btnVapenInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVapenInfoActionPerformed
        testaComboBoxVapen();
        if (!cbVapen.getSelectedItem().toString().equals("")) {
            vapenNamn = cbVapen.getSelectedItem().toString();
            setUtkvittDatum(vapenNamn);
            txtVarierande.setText(setKaliber());
            lblVarierande2.setText("        Kaliber:");
            lblVarierande.setText(vapenNamn);
            visaInfo();
        }
    }//GEN-LAST:event_btnVapenInfoActionPerformed
    /**
     * Metod kopplad till btnTeknikInfo som sätter varierande textfält och
     * labels till lämpliga värden med hjälp av metoderna setUtkvittDatum() och
     * setKraftKalla() baserat på valt alternativ i jComboTeknik, och visar
     * sedan informationen med visaInfo()-metoden.
     *
     * @param evt
     */
    private void btnTeknikInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTeknikInfoActionPerformed
        testaComboBoxTeknik();
        if (!cbTeknik.getSelectedItem().toString().equals("")) {
            teknikNamn = cbTeknik.getSelectedItem().toString();
            setUtkvittDatum(teknikNamn);
            txtVarierande.setText(setKraftKalla());
            lblVarierande2.setText("Kraftkälla:");
            lblVarierande.setText(teknikNamn);
            visaInfo();
        }

    }//GEN-LAST:event_btnTeknikInfoActionPerformed
    /**
     * Metod kopplad till btnKommInfo som sätter varierande textfält och labels
     * till lämpliga värden med hjälp av metoderna setUtkvittDatum() och
     * setOverForingsTeknik() baserat på valt alternativ i jComboKommunikation,
     * och visar sedan informationen med visaInfo()-metoden.
     *
     * @param evt
     */
    private void btnKommInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKommInfoActionPerformed
        testaComboBoxKomm();
        if (!cbKommunikation.getSelectedItem().toString().equals("")) {
            kommNamn = cbKommunikation.getSelectedItem().toString();
            setUtkvittDatum(kommNamn);
            txtVarierande.setText(setOverForingsTeknik());
            lblVarierande2.setText("Överföringsteknik:");
            lblVarierande.setText(kommNamn);
            visaInfo();
        }
    }//GEN-LAST:event_btnKommInfoActionPerformed
    // Denna knapp skickar användaren till RegistreraUtrustning sidan.
    private void btnRegistreraUtrustningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistreraUtrustningActionPerformed
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(SeDinUtrustningForm.this);
        frame.setContentPane(new RegistreraUtrustning(epost, isAdmin));
        frame.revalidate();
        frame.setTitle(" Registrera Utrustning");
        frame.repaint();
    }//GEN-LAST:event_btnRegistreraUtrustningActionPerformed
    /**
     * Metod som hämtar ut Agent_ID utifrån den i applikationen unika
     * E-postadressen som följer med som variabel mellan alla olika vyer,
     * returnerar Agent_ID som int.
     *
     * @return
     */
    private int getAgentID() {

        String query = "SELECT Agent_ID FROM mibdb.agent WHERE Epost = '" + epost + "'";
        try {
            String agentIDString = idb.fetchSingle(query);
            return Integer.parseInt(agentIDString);
        } catch (InfException ex) {

        }
        return -1;
    }

    /**
     * Metod som utifrån variabeln agentID som ges värde i metoden getAgentID()
     * hämtar hem all utrustning aktuell inloggada Agent för tillfället har
     * utkvitterad ock skapar en ArrayList<String> av det genom InfDB-metoden
     * fetchColumn().
     */
    private void getAllUtrustning() {
        String query = "SELECT Benamning FROM mibdb.utrustning WHERE mibdb.utrustning.Utrustnings_ID IN "
                + "(SELECT mibdb.innehar_utrustning.Utrustnings_ID FROM mibdb.innehar_utrustning "
                + "WHERE mibdb.innehar_utrustning.Agent_ID = " + agentID + ")";
        try {
            allUtrustning = idb.fetchColumn(query);

        } catch (InfException ex) {

            ex.printStackTrace();
        }

    }

    /**
     * Metod som hämtar alla värden från kolumnen "Benamning" i tabellen
     * "Utrustning", där Utrustnings_ID också finns i tabellen "vapen", och
     * skapar en ArrayList<String> av dessa via InfDB-metoden fetchColumn().
     */
    private void getVapenNamn() {
        String query = "SELECT Benamning FROM mibdb.utrustning WHERE mibdb.utrustning.Utrustnings_ID IN (SELECT Utrustnings_ID FROM mibdb.vapen);";
        try {
            vapen = idb.fetchColumn(query);
        } catch (InfException ex) {

            ex.printStackTrace();
        }
    }

    /**
     * Metod som hämtar alla värden från kolumnen "Benamning" i tabellen
     * "Utrustning", där Utrustnings_ID också finns i tabellen "teknik", och
     * skapar en ArrayList<String> av dessa via InfDB-metoden fetchColumn().
     */
    private void getTeknikNamn() {
        String query = "SELECT Benamning FROM mibdb.utrustning WHERE mibdb.utrustning.Utrustnings_ID IN (SELECT Utrustnings_ID FROM mibdb.teknik);";
        try {
            teknik = idb.fetchColumn(query);
        } catch (InfException ex) {

            ex.printStackTrace();
        }
    }

    /**
     * Metod som hämtar alla värden från kolumnen "Benamning" i tabellen
     * "Utrustning", där Utrustnings_ID också finns i tabellen "kommunikation",
     * och skapar en ArrayList<String> av dessa via InfDB-metoden fetchColumn().
     */
    private void getKommunikationNamn() {
        String query = "SELECT Benamning FROM mibdb.utrustning WHERE mibdb.utrustning.Utrustnings_ID IN (SELECT Utrustnings_ID FROM mibdb.kommunikation);";
        try {
            kommunikation = idb.fetchColumn(query);
        } catch (InfException ex) {

            ex.printStackTrace();
        }
    }

    /**
     * Metod som fyller upp jComboVapen med värden genom en for each loop av
     * ArrayListan "vapen" som skapats i metoden getVapenNamn().
     */
    private void fyllVapenComboBox() {
        for (String vapen : vapen) {
            if (allUtrustning.contains(vapen)) {
                cbVapen.addItem(vapen);
            }
        }

    }

    /**
     * Metod som fyller upp jComboTeknik med värden genom en for each loop av
     * ArrayListan "teknik" som skapats i metoden getTeknikNamn().
     */
    private void fyllTeknikComboBox() {
        for (String teknik : teknik) {
            if (allUtrustning.contains(teknik)) {
                cbTeknik.addItem(teknik);
            }
        }

    }

    /**
     * Metod som fyller upp jComboKommunikation med värden genom en for each
     * loop av ArrayListan "kommunikation" som skapats i metoden
     * getKommunikationNamn().
     */
    private void fyllKommunikationComboBox() {
        for (String kom : kommunikation) {
            if (allUtrustning.contains(kom)) {
                cbKommunikation.addItem(kom);
            }
        }

    }

    /**
     * Metod som hämtar ut information om utkvitteringsdatum baserat på Agentens
     * Agent_ID och utrustningens namn som kommer med som String-parameter från
     * metoderna satta på Info-knapparna.
     *
     * @param utrustningNamn
     */
    public void setUtkvittDatum(String utrustningNamn) {
        String query = "SELECT Utkvitteringsdatum "
                + "FROM mibdb.innehar_utrustning "
                + "WHERE Agent_ID = " + agentID + " "
                + "AND mibdb.innehar_utrustning.Utrustnings_ID IN "
                + "(SELECT mibdb.utrustning.Utrustnings_ID "
                + "FROM mibdb.utrustning "
                + "WHERE Benamning = '" + utrustningNamn + "')";

        try {

            txtUtKvittDatum.setText(idb.fetchSingle(query));
        } catch (InfException ex) {

            ex.printStackTrace();
        }
    }

    /**
     * Metod som hämtar info om Kraftkällan för en vald teknikutrustning med
     * hjälp av variabeln "teknikNamn" som ges värde i metoden kopplad till
     * knappen btnTeknikInfo, och returnerar det som String.
     *
     * @return
     */
    public String setKraftKalla() {

        String kraftKalla = null;
        String query = "SELECT Kraftkalla "
                + "FROM mibdb.teknik "
                + "WHERE mibdb.teknik.Utrustnings_ID IN ("
                + "    SELECT mibdb.utrustning.Utrustnings_ID "
                + "    FROM mibdb.utrustning "
                + "    WHERE Benamning = '" + teknikNamn + "'"
                + ");";

        try {
            kraftKalla = idb.fetchSingle(query);

        } catch (InfException e) {

            e.printStackTrace();
        }

        return kraftKalla;
    }

    /**
     * Metod som hämtar ut information om Kaliber hos ett valt vapen med hjälp
     * av variabeln "vapenNamn" som ges värde i metoden kopplad till knappen
     * btnVapenInfo, och returnerar kalibern som String.
     *
     * @return
     */
    public String setKaliber() {

        String kaliber = null;
        String query = "SELECT Kaliber "
                + "FROM mibdb.vapen "
                + "WHERE mibdb.vapen.Utrustnings_ID IN ("
                + "    SELECT mibdb.utrustning.Utrustnings_ID "
                + "    FROM mibdb.utrustning "
                + "    WHERE Benamning = '" + vapenNamn + "'"
                + ");";

        try {
            kaliber = idb.fetchSingle(query);

        } catch (InfException e) {

            e.printStackTrace();
        }

        return kaliber;

    }

    /**
     * Metod som hämtar ut information om Överföringsteknik hos en vald
     * kommunikationsutrustning med hjälp av variabeln "kommNamn" som ges värde
     * i metoden kopplad till knappen btnKommInfo, och returnerar det som
     * String.
     *
     * @return
     */
    public String setOverForingsTeknik() {

        String teknik = null;
        String query = "SELECT Overforingsteknik "
                + "FROM mibdb.kommunikation "
                + "WHERE mibdb.kommunikation.Utrustnings_ID IN ("
                + "    SELECT mibdb.utrustning.Utrustnings_ID "
                + "    FROM mibdb.utrustning "
                + "    WHERE Benamning = '" + kommNamn + "'"
                + ");";

        try {
            teknik = idb.fetchSingle(query);

        } catch (InfException e) {

            e.printStackTrace();
        }

        return teknik;

    }

    /**
     * Metod som vid instansiering av klassen döljer info-fälten.
     */
    private void doljInfo() {
        lblVarierande.setVisible(false);
        lblVarierande2.setVisible(false);
        lblUtkvitterad.setVisible(false);
        txtVarierande.setVisible(false);
        txtUtKvittDatum.setVisible(false);

    }

    /**
     * Metod som gör info-fälten om valt objekt synliga.
     */
    public void visaInfo() {
        lblVarierande.setVisible(true);
        lblVarierande2.setVisible(true);
        lblUtkvitterad.setVisible(true);
        txtVarierande.setVisible(true);
        txtUtKvittDatum.setVisible(true);

    }

    /**
     * Metod som visar meddelande om att inget utrustning finns utkvitterad om
     * en agent utan utrustning kommer in på sidan.
     */
    public void omIngenUtrustning() {
        if (vapen.isEmpty() || teknik.isEmpty() || kommunikation.isEmpty()) {
            lblUtrustning.setText("Du har ingen utrustning utkvitterad.");
        }
    }
   /**
  * Metod för att testa om teknik-comboboxen har något innehåll isig, om inte så
  * meddelas användaren om detta.
  */
    public void testaComboBoxTeknik() {
        try {
            if (cbTeknik.getItemCount() == 0) {
                throw new NumberFormatException();
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Du har för tillfället ingen utkvitterad teknikutrustning.");
        }
    }
    /**
  * Metod för att testa om vapen-comboboxen har något innehåll isig, om inte så
  * meddelas användaren om detta.
  */
    public void testaComboBoxVapen() {
        try {
            if (cbVapen.getItemCount() == 0) {
                throw new NumberFormatException();
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Du har för tillfället inga utkvitterade vapen.");
        }
    }
 /**
  * Metod för att testa om Kommunikations-comboboxen har något innehåll isig, om inte så
  * meddelas användaren om detta.
  */
    public void testaComboBoxKomm() {
        try {
            if (cbKommunikation.getItemCount() == 0) {
                throw new NumberFormatException();
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Du har för tillfället ingen utkvitterad kommunikationsutrustning.");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnKommInfo;
    private javax.swing.JButton btnMinSida;
    private javax.swing.JButton btnRegistreraUtrustning;
    private javax.swing.JButton btnTeknikInfo;
    private javax.swing.JButton btnVapenInfo;
    private javax.swing.JComboBox<String> cbKommunikation;
    private javax.swing.JComboBox<String> cbTeknik;
    private javax.swing.JComboBox<String> cbVapen;
    private javax.swing.JLabel lblKommunikation;
    private javax.swing.JLabel lblTeknik;
    private javax.swing.JLabel lblUtkvitterad;
    private javax.swing.JLabel lblUtrustning;
    private javax.swing.JLabel lblVapen;
    private javax.swing.JLabel lblVarierande;
    private javax.swing.JLabel lblVarierande2;
    private javax.swing.JTextField txtUtKvittDatum;
    private javax.swing.JTextField txtVarierande;
    // End of variables declaration//GEN-END:variables
}
