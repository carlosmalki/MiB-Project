/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package mib.p;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import oru.inf.InfDB;
import oru.inf.InfException;

import javax.swing.JFrame;
import javax.swing.SwingUtilities;

/**
 * TaBortAlienForm rensar aliens från databasen genom att först kontrollera
 * vilken sorts alien det är. Efter att en alien tas bort från sin specifika
 * rastabell så tas den bort från huvudtabellen för alla aliens. 
 * @author samsung
 */
public class TaBortAlienForm extends javax.swing.JPanel {

    private static InfDB idb;
    private ArrayList<String> alienNamn;
    private ArrayList<String> alienIds;
    private ArrayList<String> worms; //ejchefer -> worm
    private ArrayList<String> boglodites; //områdeschefer -> boglodite
    private ArrayList<String> squids; //kontorschefer -> squid
    //private Random rand;
    private String epost;
    private String isAdmin;
    //private String mittNamn;

    /**
     * Creates new form TaBortAlienForm
     */
    public TaBortAlienForm(String epost, String isAdmin) {
        initComponents();
        try {
            idb = new InfDB("mibdb", "3306", "mibdba", "mibkey");
        } catch (InfException ex) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
            System.out.println("Internt felmeddelande" + ex.getMessage());
        }

        this.epost = epost;
        this.isAdmin = isAdmin;
        //ejChefer = new ArrayList();
        //rand = new Random();
        //mittNamn =  getMittEgetNamn();

        fyllAlienArrayList(); //Agenter -> Aliens

        fyllBogloditeArrayList(); //Områdeschef -> boglodite
        fyllWormArrayList(); //EjChef -> worm
        fyllSquidArrayList(); //Kontorschef -> squid
        fyllArrayListIDs();
        fyllAlienComboBox(); //Agent -> alien
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblRubrik = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        cbValjAlien = new javax.swing.JComboBox<>();
        lblValjAlien = new javax.swing.JLabel();
        btnTaBortAlien = new javax.swing.JButton();
        txtAlienNamn = new javax.swing.JTextField();
        btnMinSida = new javax.swing.JButton();
        btnAdminSida = new javax.swing.JButton();

        lblRubrik.setFont(new java.awt.Font("MS Gothic", 1, 24)); // NOI18N
        lblRubrik.setText("Avregistrera aliens");

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.darkGray, null, null));

        cbValjAlien.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbValjAlienActionPerformed(evt);
            }
        });

        lblValjAlien.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        lblValjAlien.setText("Välj Alien ID:");

        btnTaBortAlien.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        btnTaBortAlien.setText("Ta bort alien");
        btnTaBortAlien.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTaBortAlienActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(lblValjAlien)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbValjAlien, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtAlienNamn, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnTaBortAlien)
                .addGap(25, 25, 25))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbValjAlien, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblValjAlien)
                    .addComponent(btnTaBortAlien)
                    .addComponent(txtAlienNamn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        btnMinSida.setBackground(new java.awt.Color(242, 242, 242));
        btnMinSida.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        btnMinSida.setText("Min sida");
        btnMinSida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinSidaActionPerformed(evt);
            }
        });

        btnAdminSida.setBackground(new java.awt.Color(242, 242, 242));
        btnAdminSida.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        btnAdminSida.setText("Adminsida");
        btnAdminSida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdminSidaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(btnAdminSida)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnMinSida)
                .addGap(25, 25, 25))
            .addGroup(layout.createSequentialGroup()
                .addGap(149, 149, 149)
                .addComponent(lblRubrik)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(72, 72, 72))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(lblRubrik)
                .addGap(26, 26, 26)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnMinSida)
                    .addComponent(btnAdminSida))
                .addGap(32, 32, 32))
        );
    }// </editor-fold>//GEN-END:initComponents
   /**
    * Metod kopplat till btnTaBortAlien, som när den trycks skapar en sträng
    * av valt Alien_ID från cbValjAlien, och detta ID testas mot listorna för boglodites, worms
    * och squids för att hitta rätt ras-tabell att utföra borttagning av ID ifrån, därefter körs
    * taBortAlien()-metoden för att slutligen ta bort vald alien helt.
    * @param evt 
    */
    private void btnTaBortAlienActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTaBortAlienActionPerformed
        String alienID = cbValjAlien.getSelectedItem().toString();
        if (boglodites.contains(alienID)) {
            taBortBoglodite(alienID);
        }
        if (worms.contains(alienID)) {
            taBortWorm(alienID);
        }
        if (squids.contains(alienID)) {
            taBortSquid(alienID);
        }
        taBortAlien(alienID);

    }//GEN-LAST:event_btnTaBortAlienActionPerformed

    private void btnMinSidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinSidaActionPerformed
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(TaBortAlienForm.this);
        frame.setContentPane(new MinSidaAgentForm(epost, isAdmin));
        frame.revalidate();
        frame.setTitle("Startsida: Agent");
        frame.repaint();
    }//GEN-LAST:event_btnMinSidaActionPerformed

    private void btnAdminSidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdminSidaActionPerformed
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(TaBortAlienForm.this);
        frame.setContentPane(new AdminFunktionerForm(epost, isAdmin));
        frame.revalidate();
        frame.setTitle("Administratörsfunktioner");
        frame.repaint();
    }//GEN-LAST:event_btnAdminSidaActionPerformed
   /**
    * Metod kopplad till cdValjAlien, när ett val görs i comboboxen skapas en sträng
    * av valt Alien_ID och används i metoden getAlienNamn för att sätta namnet på alien 
    * i textfältet.
    * @param evt 
    */
    private void cbValjAlienActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbValjAlienActionPerformed
        String alienID = cbValjAlien.getSelectedItem().toString();

        getAlienNamn(alienID);
    }//GEN-LAST:event_cbValjAlienActionPerformed

    /**
     * Metod som genom InfDB-metoden fetchColumn skapar en ArrayList över alla
     * aliens som för tillfället finns i databasen.
     */
    private void fyllAlienArrayList() {
        try {
            String query = "SELECT Namn FROM mibdb.alien;";
            alienNamn = idb.fetchColumn(query);
        } catch (InfException e) {

            e.printStackTrace();
        }
    }

    /**
     * Metod som skapar en ArrayList av alla boglodite-IDs via InfDB-metoden
     * fetchColumn.
     */
    private void fyllBogloditeArrayList() {
        try {
            String query = "select Alien_ID from mibdb.boglodite;";
            boglodites = idb.fetchColumn(query);

        } catch (InfException e) {
            e.printStackTrace();
        }
    }

    /**
     * Metod som skapar en ArrayList av alla worm-Ids via InfDB-metoden
     * fetchColumn.
     */
    private void fyllWormArrayList() {
        try {
            String query = "select Alien_ID from mibdb.worm;";
            worms = idb.fetchColumn(query);

        } catch (InfException e) {
            e.printStackTrace();
        }
    }

    /**
     * Metod som skapar en ArrayList av alla squid-Ids via InfDB-metoden
     * fetchColumn.
     */
    private void fyllSquidArrayList() {
        try {
            String query = "select Alien_ID from mibdb.squid;";
            squids = idb.fetchColumn(query);

        } catch (InfException e) {
            e.printStackTrace();
        }
    }

    private void getAlienNamn(String alienIDString) {
        String query = "SELECT Namn FROM mibdb.alien WHERE Alien_ID = '" + alienIDString + "';";
        String alienNamnet;
        try {
            alienNamnet = idb.fetchSingle(query);
            txtAlienNamn.setText(alienNamnet);
        } catch (InfException e) {

            e.printStackTrace();
        }

    }

    /**
     * Metod som via InfDB-metoden delete() tar bort Alien_ID från
     * boglodite-tabellen för att sedan kunna gå vidare och ta bort alien.
     *
     * @param aliensNamn
     */
    private void taBortBoglodite(String alienID) {
        try {

            String query = "DELETE FROM mibdb.boglodite WHERE Alien_ID = " + alienID + ";";

            idb.delete(query);

        } catch (InfException e) {
            e.printStackTrace();
        }
    }

    /**
     * Metod som via InfDB-metoden delete() tar bort Alien_ID från worm-tabellen
     * för att sedan kunna gå vidare och ta bort alien.
     *
     * @param aliensNamn
     */
    private void taBortWorm(String alienID) {
        try {

            String query = "DELETE FROM mibdb.worm WHERE Alien_ID = " + alienID + ";";

            idb.delete(query);

        } catch (InfException e) {
            e.printStackTrace();
        }
    }

    /**
     * Metod som via InfDB-metoden delete() tar bort Alien_ID från
     * squid-tabellen för att sedan kunna gå vidare och ta bort alien.
     *
     * @param aliensNamn
     */
    private void taBortSquid(String alienID) {
        try {

            String query = "DELETE FROM mibdb.squid WHERE Alien_ID = " + alienID + ";";

            idb.delete(query);

        } catch (InfException e) {
            e.printStackTrace();
        }
    }

    /**
     * Metod som till sist när alla eventuella referenser till Alien ID är
     * borttagna ur databasen slutligen tar bort alien och meddelar användaren
     * att så skett, detta genom InfDB-metoden delete(), det nyss borttagna
     * Alien_ID:t tas  bort även från comboboxen som sätts till startposition,index0.
     *
     * @param aliensNamn
     */
    private void taBortAlien(String alienID) {

        try {

            String aliensNamn = txtAlienNamn.getText();
            String query = "DELETE FROM mibdb.alien WHERE Alien_ID = " + alienID + ";";

            idb.delete(query);

            JOptionPane.showMessageDialog(null, aliensNamn + " är nu borttagen ur databasen.");

            cbValjAlien.removeItem(alienID);
            cbValjAlien.setSelectedIndex(0);
            aterstallArrayListIDs();
            fyllArrayListIDs();

        } catch (InfException e) {

            e.printStackTrace();

        }
    }

    /**
     * Metod som tömmer alienID-ArrayListan, och sedan fyller upp den igen utan
     * den nyss borttagna alien.
     */
    private void aterstallArrayListIDs() {
        alienIds.clear();
        fyllArrayListIDs();
    }

    /**
     * Metod som fyller upp ValjAlien-comboxen genom att gå igenom alienID-
     * arraylistan och lägga till ID-numren därifrån.
     *
     */
    private void fyllAlienComboBox() {

        for (String namn : alienIds) {
            cbValjAlien.addItem(namn);

        }
    }

    /**
     * Metod som skapar en ArrayList av Alien_IDs från alien-tabellen, genom
     * InfDB-metoden fetchColumn();.
     */
    private void fyllArrayListIDs() {
        try {
            String query = "SELECT Alien_ID FROM mibdb.alien ORDER BY Alien_ID ASC;";
            alienIds = idb.fetchColumn(query);
        } catch (InfException e) {
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdminSida;
    private javax.swing.JButton btnMinSida;
    private javax.swing.JButton btnTaBortAlien;
    private javax.swing.JComboBox<String> cbValjAlien;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblRubrik;
    private javax.swing.JLabel lblValjAlien;
    private javax.swing.JTextField txtAlienNamn;
    // End of variables declaration//GEN-END:variables

}
