/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

package mib.p;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import oru.inf.InfDB;
import oru.inf.InfException;
//import java.util.Random;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;

/**
 *
 * @author samsung
 */
public class TaBortAlienForm extends javax.swing.JPanel {
    
    private static InfDB idb;
    private ArrayList<String> alienNamn;

    private ArrayList<String> worms; //ejchefer -> worm
    private ArrayList<String> boglodites; //områdeschefer -> boglodite
    private ArrayList<String> squids; //kontorschefer -> squid
    //private Random rand;
    private String epost;
    private String isAdmin;
    //private String mittNamn;

    /** Creates new form TaBortAlienForm */
    public TaBortAlienForm(String epost, String isAdmin) {
        initComponents();
        try {
            idb = new InfDB("mibdb", "3306", "mibdba", "mibkey");
        } catch (InfException ex) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
            System.out.println("Internt felmeddelande" + ex.getMessage());
        }
        
        this.epost = epost;
        this.isAdmin = isAdmin;
        //ejChefer = new ArrayList();
        //rand = new Random();
        //mittNamn =  getMittEgetNamn();
        
        fyllAlienArrayList(); //Agenter -> Aliens
        
        fyllBogloditeArrayList(); //Områdeschef -> boglodite
        fyllWormArrayList(); //EjChef -> worm
        fyllSquidArrayList(); //Kontorschef -> squid
        
        fyllAlienComboBox(); //Agent -> alien
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblRubrik = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        cbValjAlien = new javax.swing.JComboBox<>();
        lblValjAlien = new javax.swing.JLabel();
        btnTaBortAlien = new javax.swing.JButton();
        btnTillbaka = new javax.swing.JButton();

        lblRubrik.setFont(new java.awt.Font("MS Gothic", 1, 18)); // NOI18N
        lblRubrik.setText("Avregistrera aliens");

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.darkGray, null, null));

        lblValjAlien.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        lblValjAlien.setText("Välj alien:");

        btnTaBortAlien.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        btnTaBortAlien.setText("Ta bort alien");
        btnTaBortAlien.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTaBortAlienActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(lblValjAlien)
                .addGap(36, 36, 36)
                .addComponent(cbValjAlien, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addComponent(btnTaBortAlien)
                .addGap(25, 25, 25))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbValjAlien, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblValjAlien)
                    .addComponent(btnTaBortAlien))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        btnTillbaka.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        btnTillbaka.setText("Tillbaka");
        btnTillbaka.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTillbakaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(166, 166, 166)
                        .addComponent(btnTillbaka))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(112, 112, 112)
                        .addComponent(lblRubrik))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(lblRubrik)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(btnTillbaka)
                .addContainerGap(54, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnTaBortAlienActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTaBortAlienActionPerformed
        String aliensNamn = cbValjAlien.getSelectedItem().toString();
    if (boglodites.contains(aliensNamn)) {
        taBortBoglodite(aliensNamn);
    }
    if (worms.contains(aliensNamn)) {
        taBortWorm(aliensNamn);
    }
    if (squids.contains(aliensNamn)) {
        taBortSquid(aliensNamn);
    } 
    taBortAlien(aliensNamn);
    
    }//GEN-LAST:event_btnTaBortAlienActionPerformed

    private void btnTillbakaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTillbakaActionPerformed
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(TaBortAlienForm.this);
        frame.setContentPane(new MinSidaAgentForm(epost, isAdmin));
        frame.revalidate();
        frame.setTitle("Startsida: Agent");
        frame.repaint();
    }//GEN-LAST:event_btnTillbakaActionPerformed

    /**
     * Metod som genom InfDB-metoden fetchColumn skapar en ArrayList över alla
     * aliens som för tillfället finns i databasen.
     */
    private void fyllAlienArrayList() {
        try {
            String query = "SELECT Namn FROM mibdb.alien;";
            alienNamn = idb.fetchColumn(query);
        } catch (InfException e) {

            e.printStackTrace();
        }
    }
    
    /**
     * Metod som skapar en ArrayList av alla boglodites via InfDB-metoden
     * fetchColumn.
     */
    private void fyllBogloditeArrayList() {
        try {
            String query = "select Namn from mibdb.alien where mibdb.alien.Alien_ID in(select mibdb.boglodite.Alien_ID from mibdb.boglodite);";
            boglodites = idb.fetchColumn(query);

        } catch (InfException e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Metod som skapar en ArrayList av alla worms via InfDB-metoden
     * fetchColumn.
     */
    private void fyllWormArrayList() {
        try {
            String query = "select Namn from mibdb.alien where mibdb.alien.Alien_ID in(select mibdb.worm.Alien_ID from mibdb.worm);";
            worms = idb.fetchColumn(query);

        } catch (InfException e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Metod som skapar en ArrayList av alla squids via InfDB-metoden
     * fetchColumn.
     */
    private void fyllSquidArrayList() {
        try {
            String query = "select Namn from mibdb.alien where mibdb.alien.Alien_ID in(select mibdb.squid.Alien_ID from mibdb.squid);";
            squids = idb.fetchColumn(query);

        } catch (InfException e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Metod som utfrån aliens namn hämtar dennes Alien_ID och returnerar som
     * int för att kunna användas i andra metoder där Alien_ID ska tas bort
     * eller bytas ut.
     *
     * @param aliensNamn
     * @return
     */
    private int getAlienID(String aliensNamn) {
        String query = "SELECT Alien_ID FROM mibdb.alien WHERE Namn = '" + aliensNamn + "';";
        int alienID = 0;
        try {
            alienID = Integer.parseInt(idb.fetchSingle(query));
        } catch (InfException e) {

            e.printStackTrace();
        }
        return alienID;
    }
    
    /**
     * Metod som tar bort Alien_ID från boglodite-tabellen för att sedan kunna
     * gå vidare och ta bort alien.
     *
     * @param aliensNamn
     */
    private void taBortBoglodite(String aliensNamn) {
        try {

            int alienID = getAlienID(aliensNamn);
            String query = "DELETE FROM mibdb.boglodite WHERE Alien_ID = " + alienID + ";";

            idb.delete(query);

        } catch (InfException e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Metod som tar bort Alien_ID från boglodite-tabellen för att sedan kunna
     * gå vidare och ta bort alien.
     *
     * @param aliensNamn
     */
    private void taBortWorm(String aliensNamn) {
        try {

            int alienID = getAlienID(aliensNamn);
            String query = "DELETE FROM mibdb.worm WHERE Alien_ID = " + alienID + ";";

            idb.delete(query);

        } catch (InfException e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Metod som tar bort Alien_ID från boglodite-tabellen för att sedan kunna
     * gå vidare och ta bort alien.
     *
     * @param aliensNamn
     */
    private void taBortSquid(String aliensNamn) {
        try {

            int alienID = getAlienID(aliensNamn);
            String query = "DELETE FROM mibdb.squid WHERE Alien_ID = " + alienID + ";";

            idb.delete(query);

        } catch (InfException e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Metod som till sist när alla eventuella referenser till Alien ID är
     * borttagna ur databasen slutligen tar bort alien och meddelar användaren
     * att så skett.
     *
     * @param aliensNamn
     */
    private void taBortAlien(String aliensNamn) {

        try {

            int alienID = getAlienID(aliensNamn);
            String query = "DELETE FROM mibdb.alien WHERE Alien_ID = " + alienID + ";";

            idb.delete(query);
            JOptionPane.showMessageDialog(null, aliensNamn + " är nu borttagen ur databasen.");
            aterstallAlienArrayList();
            aterstallAlienComboBox();
            fyllAlienComboBox();

        } catch (InfException e) {

            e.printStackTrace();

        }
    }
    
    /**
     * Metod som tömmer alienNamn-ArrayListan, och sedan fyller upp den igen
     * utan den nyss borttagna alien.
     */
    private void aterstallAlienArrayList() {
        alienNamn.clear();
        fyllAlienArrayList();
    }
    
    /**
     * Metod som återställer aliennamn-comboxoxen genom att först tömma den helt
     * och sedan lägga till "Alien" på index 0.
     */
    private void aterstallAlienComboBox() {
        cbValjAlien.removeAllItems();
        cbValjAlien.addItem("Aliens");
    }
    
    /**
     * Metod som fyller upp ValjAlien-comboxen genom att gå igenom alienNamn-
     * arraylistan och lägga till namnen därifrån.
     *
     */
    private void fyllAlienComboBox() {

        for (String namn : alienNamn) {
            cbValjAlien.addItem(namn);

        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnTaBortAlien;
    private javax.swing.JButton btnTillbaka;
    private javax.swing.JComboBox<String> cbValjAlien;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblRubrik;
    private javax.swing.JLabel lblValjAlien;
    // End of variables declaration//GEN-END:variables

}
