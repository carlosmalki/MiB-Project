/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package mib.p;

import javax.swing.JOptionPane;
import oru.inf.InfDB;
import oru.inf.InfException;
import java.util.HashMap;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;

/**
 * AgentSokForm är en JPanel-klass som visar en panel över ett formulär 
 * för att utifrån Agent ID söka upp information om agenter registrerade i 
 * databasen, klassen tar in String epost, och String isAdmin som håller
 * reda på vilken agent som är inloggad, och om denne är admin.
 * @author ASUS
 * 
 * 
 */
public class AgentSokForm extends javax.swing.JPanel {

    private static InfDB idb;
    private String epost;
    private String isAdmin;
    private ArrayList<String> omradesChef;
    private ArrayList<String> kontorsChef;
    private boolean idExists;
    private ValideringsKlass validering;
    /**
     * @param epost
     * @param isAdmin
     */
    public AgentSokForm(String epost, String isAdmin) {

        this.isAdmin = isAdmin;
        initComponents();
        try {
            idb = new InfDB("mibdb", "3306", "mibdba", "mibkey");
        } catch (InfException ex) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
            System.out.println("Internt felmeddelande" + ex.getMessage());
        }
        this.epost = epost;
        idExists = true;
        validering = new ValideringsKlass();

        fyllArrayLists();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblAngeAgentId = new javax.swing.JLabel();
        txtAgentIdSok = new javax.swing.JTextField();
        btnSok = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        labEpost = new javax.swing.JLabel();
        txtNamn = new javax.swing.JTextField();
        labTelefon = new javax.swing.JLabel();
        labRegDatum = new javax.swing.JLabel();
        txtEpost = new javax.swing.JTextField();
        labAnsvAgent = new javax.swing.JLabel();
        txtTelefon = new javax.swing.JTextField();
        txtRegDatum = new javax.swing.JTextField();
        txtAdmin = new javax.swing.JTextField();
        labNamn = new javax.swing.JLabel();
        lblAgentInfo = new javax.swing.JLabel();
        txtOmrade = new javax.swing.JTextField();
        txtLosenOrd = new javax.swing.JTextField();
        labLosenOrd = new javax.swing.JLabel();
        lblOmrade = new javax.swing.JLabel();
        txtChefEllerInte = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnMinSida = new javax.swing.JButton();
        btnAdminSida = new javax.swing.JButton();
        btnRensa = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(550, 343));
        setMinimumSize(new java.awt.Dimension(550, 343));
        setName(""); // NOI18N

        lblAngeAgentId.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        lblAngeAgentId.setText("Ange Agent-ID:");

        btnSok.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        btnSok.setText("Sök");
        btnSok.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSokActionPerformed(evt);
            }
        });

        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(153, 153, 153), new java.awt.Color(204, 204, 204), null, null));

        labEpost.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        labEpost.setText("Epost:");

        labTelefon.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        labTelefon.setText("Telefon:");

        labRegDatum.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        labRegDatum.setText("Anst-datum:");

        labAnsvAgent.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        labAnsvAgent.setText("Administratör:");

        labNamn.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        labNamn.setText("Namn:");

        lblAgentInfo.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        lblAgentInfo.setText("Agent-information:");

        labLosenOrd.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        labLosenOrd.setText("Lösenord:");

        lblOmrade.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        lblOmrade.setText("Område:");

        jLabel1.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        jLabel1.setText("Chef:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(lblAgentInfo)
                        .addGap(92, 92, 92))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labTelefon, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(labAnsvAgent, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(labEpost, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(labNamn, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblOmrade, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(labRegDatum, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtNamn)
                                    .addComponent(txtEpost)
                                    .addComponent(txtTelefon)
                                    .addComponent(txtRegDatum)
                                    .addComponent(txtAdmin)
                                    .addComponent(txtOmrade, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(labLosenOrd)
                                    .addComponent(jLabel1))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtChefEllerInte)
                                    .addComponent(txtLosenOrd, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE))))
                        .addGap(28, 28, 28))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAgentInfo)
                .addGap(3, 3, 3)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNamn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labNamn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEpost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labEpost))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTelefon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labTelefon))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRegDatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labRegDatum, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labAnsvAgent))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtOmrade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblOmrade))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLosenOrd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labLosenOrd))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtChefEllerInte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        btnMinSida.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        btnMinSida.setText("Min sida");
        btnMinSida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinSidaActionPerformed(evt);
            }
        });

        btnAdminSida.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        btnAdminSida.setText("Adminsida");
        btnAdminSida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdminSidaActionPerformed(evt);
            }
        });

        btnRensa.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        btnRensa.setText("Rensa");
        btnRensa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRensaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(16, 16, 16)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(txtAgentIdSok, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(lblAngeAgentId)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(24, 24, 24)
                                        .addComponent(btnAdminSida)))
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnSok)
                                    .addComponent(btnRensa))
                                .addGap(39, 39, 39)))
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 45, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnMinSida)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(lblAngeAgentId)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtAgentIdSok, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSok)
                        .addGap(12, 12, 12)
                        .addComponent(btnRensa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnMinSida)
                    .addComponent(btnAdminSida))
                .addGap(15, 15, 15))
        );
    }// </editor-fold>//GEN-END:initComponents
   /**
     * Metod som först återställer texten på fältet txtAdmin till "", för att
     * sedan köra agentSok()-metoden och genom det få info om vald agent, efter
     * att först ha kontrollerat att inmatningen är giltig, och att valt Agent ID existerar
     * i databasen, detta genom metoder från ValideringsKlassen.
     *
     * @param evt
     */
    private void btnSokActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSokActionPerformed
        rensaTextFalt();
        String agentIDString = txtAgentIdSok.getText();

    try {
        if (!ValideringsKlass.validateTextFieldNotEmpty(agentIDString)) {
            JOptionPane.showMessageDialog(null, "Du måste skriva in ett Agent ID för sökning.");
        } else if (!ValideringsKlass.valideraInt(agentIDString)) {
            JOptionPane.showMessageDialog(null, "Ogiltig Agent ID. Ange heltalssiffra.");
        } else if (!ValideringsKlass.existerarAgentID(agentIDString)) {
            JOptionPane.showMessageDialog(null, "Valt Agent-ID existerar inte i databasen. Försök igen.");
        } else {
            txtAdmin.setText("");
            agentSok();
            chefEllerInte();
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Ett fel inträffade: " + e.getMessage());
    }
    
    }//GEN-LAST:event_btnSokActionPerformed
    /**
     * Metod kopplad till btnMinSida som fyller upp JFrame med en ny instans av
     * MinSidaAgentForm för att användaren ska kunna ta sig tillbaka till sin
     * sida, epost och isAdmin skickas med som parametrar för att initialiera en
     * ny "Min Sida", fönster-titeln sätts till "Startida: Agent" och fönstret
     * "målas om" för att visa "Min Sida"-panelen.
     *
     * @param evt
     */
    private void btnMinSidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinSidaActionPerformed
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(AgentSokForm.this);
        frame.setContentPane(new MinSidaAgentForm(epost, isAdmin));
        frame.revalidate();
        frame.setTitle("Startsida: Agent");
        frame.repaint();
    }//GEN-LAST:event_btnMinSidaActionPerformed
    /**
     * Metod kopplad till btnAdminSida som fyller upp JFrame med en ny instans
     * av AdminFunktionerForm för att användaren ska kunna ta sig tillbaka till
     * adminsidan, epost och isAdmin skickas med som parametrar för att
     * initialisera en ny "Admin-sida", fönster-titeln sätts till
     * "Administratörsfunktioner" och fönstret "målas om" för att visa
     * "Admin-sida"-panelen.
     *
     * @param evt
     */
    private void btnAdminSidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdminSidaActionPerformed
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(AgentSokForm.this);
        frame.setContentPane(new AdminFunktionerForm(epost, isAdmin));
        frame.revalidate();
        frame.setTitle("Administratörsfunktioner");
        frame.repaint();
    }//GEN-LAST:event_btnAdminSidaActionPerformed
    /**
     * Metod kopplad till btnRensa, som kör metoden rensaTextFalt() för att
     * återställa formuläret.
     * @param evt 
     */
    private void btnRensaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRensaActionPerformed
        rensaTextFalt();
    }//GEN-LAST:event_btnRensaActionPerformed
    /**
     * Metod som körs inifrån agentSok()metoden och sätter text på valda
     * textfält utifrån värden i HashMapen agentInfo.
     *
     * @param agentInfo
     */
    private void setTextFalt(HashMap<String, String> agentInfo) {
        txtNamn.setText(agentInfo.get("Namn"));
        txtRegDatum.setText(agentInfo.get("Anstallningsdatum"));
        txtLosenOrd.setText(agentInfo.get("Losenord"));
        txtEpost.setText(agentInfo.get("Epost"));
        txtTelefon.setText(agentInfo.get("Telefon"));

    }

    /**
     * Metod som utifrån Agent_ID hämtar info om namnet på det område en viss
     * agent tillhör, detta genom InfDB-metoden fetchSingle, sedan sätts texten
     * på textfältet txtOmrade.
     *
     * @param agentID
     */
    private void setOmrade(int agentID) {
        try {
            String platsNamn = idb.fetchSingle("SELECT Benamning FROM mibdb.omrade WHERE Omrades_ID IN (SELECT Omrade FROM mibdb.agent WHERE Agent_ID = " + agentID + ")");
            txtOmrade.setText(platsNamn);
        } catch (InfException e) {

        }

    }

    /**
     * Metod som genom InfDB-metoden fetchRow skapar en HashMap raden för valt
     * agentID i tabellen Agent, sedan körs setTextFalt-metoden för att skriva
     * värdena från HashMapen på tilldelade textfält, och även setOmrade() och
     * SetAdmin() för att skriva också dessa värden på respektive textfält.
     */
    private void agentSok() {
        int agentID;
        if (ValideringsKlass.valideraInt(txtAgentIdSok.getText())) {
            agentID = Integer.parseInt(txtAgentIdSok.getText());
        } else {
            JOptionPane.showMessageDialog(null, "Felaktig inmatning. Ange ett giltigt Agent-ID.");
            return;
        }

        try {
            HashMap<String, String> agentInfo = idb.fetchRow("SELECT * FROM mibdb.agent WHERE Agent_ID = " + agentID + ";");
            setTextFalt(agentInfo);

            setOmrade(agentID);
            setAdmin();

        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Ett fel uppstod vid sökningen av alien.");
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "Vänligen ange heltalssiffra för ID-sökning.");
        }
    }

    /**
     * Metod som genom InfDB-metoden fetchSingle() hämtar uppgift om vald agent
     * är administratör eller ej, och skriver sedan ut det i textfältet
     * txtAdmin, skulle valt Agent_ID inte finnas i databasen lämnas
     * felmeddelande om detta.
     */
    public void setAdmin() {
        int agentID;
        if (ValideringsKlass.valideraInt(txtAgentIdSok.getText())) {
            try {
                agentID = Integer.parseInt(txtAgentIdSok.getText());
                String admin;
                String query = "SELECT Administrator FROM mibdb.agent WHERE Agent_ID = " + agentID + ";";
                if (idb.fetchSingle(query).equals("J")) {
                    admin = "Ja";
                } else {
                    admin = "Nej";
                }
                txtAdmin.setText(admin);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Vänligen ange heltalssiffra för ID-sökning.");
            } catch (InfException e) {
                JOptionPane.showMessageDialog(null, "Agent ID " + txtAgentIdSok.getText() + " finns inte i databasen.");
                e.printStackTrace();

                txtChefEllerInte.setText("");
            } catch (NullPointerException e) {

                idExists = false;
                txtChefEllerInte.setText("");

                e.printStackTrace();
            }
        }
    }

    /**
     * Metod som via InfDB-metoden fetchColumn skapar arraylistor av
     * områderschefer och kontorschefer för att använda för att kontrollera om
     * vald agent är chef eller inte.
     */
    private void fyllArrayLists() {
        try {
            String query = "SELECT Agent_ID FROM mibdb.omradeschef";
            omradesChef = idb.fetchColumn(query);
            String query2 = "SELECT Agent_ID FROM mibdb.kontorschef";
            kontorsChef = idb.fetchColumn(query2);

        } catch (InfException ex) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
            System.out.println("Internt felmeddelande: " + ex.getMessage());

        }

    }

    /**
     * Metod som kollar upp om vald agent är chef eller inte, genom att söka
     * genom arraylistorna omradesChef och kontorsChef, om sökningen gjorts på
     * ett Agent_ID som inte existerar i datbasen kommer idExists vara false när
     * metoden körs och då görs inget annat än att idExists sätts till true
     * inför fortsatta sökningar, annars sätts texten i txtChefEller inte med
     * relevant information.
     */
    private void chefEllerInte() {
        int agentID;
        String omrade = "";

        String agentIDString = "";
        if (ValideringsKlass.valideraInt(txtAgentIdSok.getText())) {
            agentID = Integer.parseInt(txtAgentIdSok.getText());
            agentIDString = Integer.toString(agentID);
            omrade = getOmrade(agentID);
        } else {
            JOptionPane.showMessageDialog(null, "Felaktig inmatning. Ange ett giltigt Agent-ID.");

        }
        if (idExists) {
            if (omradesChef.contains(agentIDString)) {
                txtChefEllerInte.setText("Område: " + omrade);
            } else if (kontorsChef.contains(agentIDString)) {
                txtChefEllerInte.setText("Kontorschef: Örebro");
            } else {
                txtChefEllerInte.setText("Nej");
            }
        }
        idExists = true;
    }

    /**
     * Metod som hämtar benämningen på det område en agent är chef för, med
     * hjälp av dennes Agent_ID via InfDB-metoden fetchSingle, metoden
     * returnerar områdesnamnet som String.
     *
     * @param agentID
     * @return
     */
    private String getOmrade(int agentID) {
        String omrade = "";
        String query = "SELECT Benamning "
                + "FROM mibdb.omrade "
                + "WHERE Omrades_ID IN (SELECT Omrade FROM mibdb.omradeschef WHERE Agent_ID = " + agentID + ");";
        try {
            omrade = idb.fetchSingle(query);
        } catch (InfException e) {

            e.printStackTrace();
        }
        return omrade;
    }
    /**
     * Metod som återställer textfälten inför ny sökning, eller när rensa-knappen 
     * trycks.
     */
    public void rensaTextFalt()
    {
    txtAdmin.setText("");
    txtChefEllerInte.setText("");
    txtOmrade.setText("");
    txtRegDatum.setText("");
    txtTelefon.setText("");
    txtNamn.setText("");
    txtLosenOrd.setText("");
    txtEpost.setText("");
    
    
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdminSida;
    private javax.swing.JButton btnMinSida;
    private javax.swing.JButton btnRensa;
    private javax.swing.JButton btnSok;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel labAnsvAgent;
    private javax.swing.JLabel labEpost;
    private javax.swing.JLabel labLosenOrd;
    private javax.swing.JLabel labNamn;
    private javax.swing.JLabel labRegDatum;
    private javax.swing.JLabel labTelefon;
    private javax.swing.JLabel lblAgentInfo;
    private javax.swing.JLabel lblAngeAgentId;
    private javax.swing.JLabel lblOmrade;
    private javax.swing.JTextField txtAdmin;
    private javax.swing.JTextField txtAgentIdSok;
    private javax.swing.JTextField txtChefEllerInte;
    private javax.swing.JTextField txtEpost;
    private javax.swing.JTextField txtLosenOrd;
    private javax.swing.JTextField txtNamn;
    private javax.swing.JTextField txtOmrade;
    private javax.swing.JTextField txtRegDatum;
    private javax.swing.JTextField txtTelefon;
    // End of variables declaration//GEN-END:variables
}
