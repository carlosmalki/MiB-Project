/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package mib.p;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import oru.inf.InfDB;
import oru.inf.InfException;
import java.util.ArrayList;
import java.util.Random;

/**
 * RegistreraAgentForm är en JPanel-klass för att registrera nya Agenter i
 * databasen, anvädaren får välja vissa uppgifter och andra (Namn och epost)
 * genereras automatiskt.
 *
 * @author ASUS
 */
public class RegisteraAgentForm extends javax.swing.JPanel {

    private static InfDB idb;
    private int agentID;
    private String epost;
    private String isAdmin;
    ValideringsKlass validering = new ValideringsKlass();
    private ArrayList<String> agentNamn;
    Random rand = new Random();

    /**
     * Creates new form RegisteraForm
     *
     * @param epost
     * @param isAdmin
     */
    public RegisteraAgentForm(String epost, String isAdmin) {
        initComponents();
        try {
            idb = new InfDB("mibdb", "3306", "mibdba", "mibkey");
        } catch (InfException ex) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
            System.out.println("Internt felmeddelande" + ex.getMessage());
        }
        setAgentID();
        fyllOmradesComboBox();
        fyllNamnArrayList();
        txtNamnReg.requestFocus();
        this.epost = epost;
        this.isAdmin = isAdmin;
        txtEpost.setEditable(false);
        txtNamnReg.setEditable(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnMinSida = new javax.swing.JButton();
        lblRegistreraAlien = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        txtNamnReg = new javax.swing.JTextField();
        lblPlats = new javax.swing.JLabel();
        lblRas = new javax.swing.JLabel();
        btnSkapaEpost = new javax.swing.JButton();
        txtEpost = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtTelefon = new javax.swing.JTextField();
        txtDatumReg = new javax.swing.JTextField();
        lblVarierande = new javax.swing.JLabel();
        cbAdmin = new javax.swing.JComboBox<>();
        lblNamn = new javax.swing.JLabel();
        cbValdBokstav = new javax.swing.JComboBox<>();
        lblTelefon = new javax.swing.JLabel();
        txtLosenOrdReg = new javax.swing.JTextField();
        btnSkapaNamn = new javax.swing.JButton();
        lblLosenord = new javax.swing.JLabel();
        cbOmrade = new javax.swing.JComboBox<>();
        lblRegDatum = new javax.swing.JLabel();
        btnRegistrera = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        btnAdminSida = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(550, 343));
        setMinimumSize(new java.awt.Dimension(550, 343));
        setPreferredSize(new java.awt.Dimension(550, 343));

        btnMinSida.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        btnMinSida.setText("Min sida");
        btnMinSida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinSidaActionPerformed(evt);
            }
        });

        lblRegistreraAlien.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblRegistreraAlien.setText("Registrera Agent");

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(102, 102, 102), null, null));

        txtNamnReg.setText("Agent");

        lblPlats.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblPlats.setText("Administratör:");

        lblRas.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblRas.setText("Område:");

        btnSkapaEpost.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        btnSkapaEpost.setText("Skapa E-post");
        btnSkapaEpost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSkapaEpostActionPerformed(evt);
            }
        });

        jLabel1.setText("+");

        lblVarierande.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblVarierande.setText("Telefon:");

        cbAdmin.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { " ", "Nej", "Ja" }));
        cbAdmin.setMinimumSize(new java.awt.Dimension(64, 22));
        cbAdmin.setPreferredSize(new java.awt.Dimension(64, 22));

        lblNamn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblNamn.setText("Namn:");

        cbValdBokstav.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "Å", "Ä", "Ö" }));

        lblTelefon.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblTelefon.setText("Epost:");

        btnSkapaNamn.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        btnSkapaNamn.setText("Skapa namn");
        btnSkapaNamn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSkapaNamnActionPerformed(evt);
            }
        });

        lblLosenord.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblLosenord.setText("Lösenord:");

        cbOmrade.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Välj område" }));
        cbOmrade.setMinimumSize(new java.awt.Dimension(64, 22));
        cbOmrade.setName(""); // NOI18N
        cbOmrade.setOpaque(true);
        cbOmrade.setPreferredSize(new java.awt.Dimension(64, 22));

        lblRegDatum.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblRegDatum.setText("Anst-datum:");

        btnRegistrera.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        btnRegistrera.setText("Registrera");
        btnRegistrera.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistreraActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("(YYYY-MM-DD)");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblRas)
                            .addComponent(lblNamn)
                            .addComponent(lblVarierande)
                            .addComponent(lblTelefon))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 109, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtTelefon, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cbOmrade, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(txtNamnReg, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbValdBokstav, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtEpost)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPlats)
                            .addComponent(lblRegDatum)
                            .addComponent(lblLosenord))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtDatumReg, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cbAdmin, 0, 164, Short.MAX_VALUE)
                            .addComponent(txtLosenOrdReg))))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSkapaNamn, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSkapaEpost)
                    .addComponent(jLabel2))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(200, 200, 200)
                .addComponent(btnRegistrera)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblRas)
                    .addComponent(cbOmrade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNamnReg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNamn)
                    .addComponent(jLabel1)
                    .addComponent(cbValdBokstav, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSkapaNamn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblVarierande)
                    .addComponent(txtTelefon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtEpost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTelefon)
                    .addComponent(btnSkapaEpost))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPlats)
                    .addComponent(cbAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRegDatum)
                    .addComponent(txtDatumReg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(lblLosenord))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtLosenOrdReg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnRegistrera)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        btnAdminSida.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        btnAdminSida.setText("Adminsida");
        btnAdminSida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdminSidaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(225, 225, 225)
                .addComponent(lblRegistreraAlien)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(51, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAdminSida)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnMinSida))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblRegistreraAlien)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnMinSida)
                    .addComponent(btnAdminSida))
                .addGap(12, 12, 12))
        );
    }// </editor-fold>//GEN-END:initComponents
  /**
     * Metod kopplad till btnRegistrera, som utför själva registreringen genom
     * InfDB-metoden insert, efter att först ha kontrollerat att alla fält har
     * text och giltig input via metoder från valideringsklassen.
     *
     * @param evt
     */
    private void btnRegistreraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistreraActionPerformed
        String namn = txtNamnReg.getText();
        String eposten = txtEpost.getText();
        String telnr = txtTelefon.getText();
        String datum = txtDatumReg.getText();
        String losenord = txtLosenOrdReg.getText();
        String admin;
        int omrade;
        if (!cbOmrade.getSelectedItem().toString().equals("Välj område")) {
            omrade = getOmradesID();
        } else {
            JOptionPane.showMessageDialog(null, "Områdesfältet får inte vara tomt.");
            return;
        }
        if (cbAdmin.getSelectedItem().toString().equals("Ja")) {
            admin = "J";
        } else {
            admin = "N";
        }

        if (!ValideringsKlass.validateTextFieldNotEmpty(namn)) {
            JOptionPane.showMessageDialog(null, "Namnetfältet får inte vara tomt.");
            return;
        }

        if (!ValideringsKlass.validateTextFieldNotEmpty(eposten)) {
            JOptionPane.showMessageDialog(null, "E-postfältet får inte vara tom.");
            return;
        }

        if (!ValideringsKlass.validateTextFieldNotEmpty(telnr)) {
            JOptionPane.showMessageDialog(null, "Telefonnummerfältet får inte vara tomt.");
            return;
        }
        if (!ValideringsKlass.valideraTelefonNummer(telnr)) {
            JOptionPane.showMessageDialog(null, "Felaktigt format. Telefonnumret får innehålla enbart siffor plus max ett bindestreck, som ej får vara på första eller sista plats.");
            return;

        }

        if (!ValideringsKlass.validateTextFieldNotEmpty(datum)) {
            JOptionPane.showMessageDialog(null, "Datumefältet får inte vara tomt.");
            return;
        }

        if (!ValideringsKlass.validateTextFieldNotEmpty(losenord)) {
            JOptionPane.showMessageDialog(null, "Lösenordsfältet får inte vara tomt.");
            return;
        }

        if (!ValideringsKlass.valideraDatum(datum)) {
            JOptionPane.showMessageDialog(null, "Ange datum enligt format: YYYY-MM-DD.");
            return;
        }

        if (ValideringsKlass.checkEpost(eposten)) {
            JOptionPane.showMessageDialog(null, "E-postadressen finns redan i databasen. Klicka 'Skapa namn' för att få ett nytt namn, och sedan 'Skapa E-post' igen");
            return;
        }

        try {
            idb.insert("INSERT INTO mibdb.agent VALUES (" + agentID + ", '" + namn + "', '" + telnr + "', '" + datum + "', '" + admin + "', '" + eposten + "', '" + losenord + "', " + omrade + ")");
            JOptionPane.showMessageDialog(null, "Agent " + namn + " har registrerats i databasen.");
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Ett fel uppstod vid infogning av data.");
            return;
        }
        setFaltAgent();
        clearTextFalt();
        setAgentID();
    }//GEN-LAST:event_btnRegistreraActionPerformed
    /**
     * Metod kopplad till btnMinSida som fyller upp JFrame med en ny instans av
     * MinSidaAgentForm för att användaren ska kunna ta sig tillbaka till sin
     * sida, epost och isAdmin skickas med som parametrar för att initialiera en
     * ny "Min Sida", fönster-titeln sätts till "Startida: Agent" och fönstret
     * "målas om" för att visa "Min Sida"-panelen.
     *
     * @param evt
     */
    private void btnMinSidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinSidaActionPerformed
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(RegisteraAgentForm.this);
        frame.setContentPane(new MinSidaAgentForm(epost, isAdmin));
        frame.revalidate();
        frame.setTitle("Startsida: Agent");
        frame.repaint();
    }//GEN-LAST:event_btnMinSidaActionPerformed

    /**
     * Återställer textfälten och comboBoxen.
     */
    private void clearTextFalt() {

        txtTelefon.setText("");

        txtEpost.setText("");
        txtNamnReg.setText("Agent");

        txtLosenOrdReg.setText("");

        txtDatumReg.setText("");

        cbOmrade.setSelectedIndex(0);
        cbValdBokstav.setSelectedIndex(0);
        cbAdmin.setSelectedIndex(0);

    }

    /**
     * Metod som hämtar ut Omrades_ID från området valt i cbOmrade-comboboxen
     * via InfDB-metoden fetchSingel, och sedan returnerar det i form av ett
     * int-värde efter att först ha använt Integer.parseInt på hämtat värde.
     *
     * @return
     */
    private int getOmradesID() {
        String omrade = cbOmrade.getSelectedItem().toString();
        String query = "SELECT Omrades_ID FROM mibdb.omrade WHERE Benamning = '" + omrade + "';";
        int omradesID = 0;

        try {
            omradesID = Integer.parseInt(idb.fetchSingle(query));

        } catch (InfException e) {

            e.printStackTrace();
        }

        return omradesID;
    }

    /**
     * Metod kopplad till btnSkapaEpost som först kollar så att txtNamnReg har
     * ett giltigt namn och om det har det körs metoden skapaEpost() för att
     * generera en epost- adress.
     *
     * @param evt
     */

    private void btnSkapaEpostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSkapaEpostActionPerformed
        if (txtNamnReg.getText().equals("Agent")) {
            JOptionPane.showMessageDialog(null, "Skapa agent-namn innan E-post");

        } else {
            skapaEpost();
        }
    }//GEN-LAST:event_btnSkapaEpostActionPerformed
    /**
     * Metod kopplad till btnSkapaNamn, som när den trycks kör metoden
     * skapaNamn() för att generera ett namn till agenten.
     *
     *
     * @param evt
     */
    private void btnSkapaNamnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSkapaNamnActionPerformed
        skapaNamn();
    }//GEN-LAST:event_btnSkapaNamnActionPerformed

    private void btnAdminSidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdminSidaActionPerformed
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(RegisteraAgentForm.this);
        frame.setContentPane(new AdminFunktionerForm(epost, isAdmin));
        frame.revalidate();
        frame.setTitle("Administratörsfunktioner");
        frame.repaint();
    }//GEN-LAST:event_btnAdminSidaActionPerformed
    /**
     * Metod som använder sig av InfDB-metoden getAutoIncrement() för att välja
     * ut nästkommande värde ur kolumnen Agent_ID i tabellen agent, och detta
     * värde görs sedan om till int via Integer.parseInt.
     */
    private void setAgentID() {
        try {
            String agentIDStr = idb.getAutoIncrement("agent", "Agent_ID");
            agentID = Integer.parseInt(agentIDStr);

        } catch (InfException e) {

            JOptionPane.showMessageDialog(null, "Ett fel uppstod vid generering av Alien-ID. Vänligen försök igen.");
        }
    }

    /**
     * Metod som fyller upp cbOmrade genom att via InfDB-metoden fetchColumn
     * skapa en arraylist av Benamning från omrade-tabellen, och denna arraylist
     * loopas sedan igenom och varje objekt läggs till i cbOmrade-comboboxen.
     */
    private void fyllOmradesComboBox() {
        String query = "SELECT Benamning FROM mibdb.omrade;";
        ArrayList<String> omraden = new ArrayList<>();

        try {
            omraden = idb.fetchColumn(query);
            for (String omrade : omraden) {
                cbOmrade.addItem(omrade);

            }
        } catch (InfException e) {

            e.printStackTrace();
        }

    }

    /**
     * Skapar automatiskt ett namn åt agenten utifrån vald bokstav i
     * cbValdBokstav, om önskat namn inte finns i listan över registrerade
     * agenter så sätts namnet till "Agent +vald bokstav", och om namnet redan
     * finns meddelas detta, och en slumpmässig siffra 0-9 väljs ut via
     * Random-metoden nextInt() och läggs till efter "Agent + vald bokstav".
     */
    public void skapaNamn() {
        String valdBokstav = cbValdBokstav.getSelectedItem().toString();
        String onskatNamn = "Agent " + valdBokstav;
        String namnet;

        if (!agentNamn.contains(onskatNamn)) {
            namnet = "Agent " + valdBokstav;
            JOptionPane.showMessageDialog(null, "Nytt agentnamn: " + namnet);
        } else {
            int namnSiffra = rand.nextInt(9);
            namnet = "Agent " + valdBokstav + namnSiffra;
            JOptionPane.showMessageDialog(null, "Agent " + valdBokstav + " finns redan i databasen. Nytt agentnamn blir: " + namnet);
        }

        txtNamnReg.setText(namnet);
    }

    /**
     * Skapar automatiskt en epost-adress till agenten utifrån dennes namn, är
     * sista tecknet i namnet en bokstav används a+sista bokstaven + @mib.net
     * för att skapa adressen, om sista tecket är en siffra används istället a+
     * de två sista bokstäverna + mib.net, dessa utvärderingar görs via
     * valideringsklassens valideraInt()-metod.
     */
    public void skapaEpost() {
        String namnet = txtNamnReg.getText();
        String eposten;
        String sistaBokstav = namnet.substring(namnet.length() - 1).toLowerCase();
        if (!ValideringsKlass.valideraInt(sistaBokstav)) {
            eposten = "a" + sistaBokstav + "@mib.net";
        } else {
            String nastSistaBokstav = namnet.substring(namnet.length() - 2).toLowerCase();
            eposten = "a" + nastSistaBokstav + "@mib.net";
        }
        txtEpost.setText(eposten);
    }

    /**
     * Skapar en lista över alla registrerade agenter via InfDb-metoden
     * fetchColumn, för att kunna ha att jämföra med när nya agenter får namn,
     * så det inte blir dubbletter.
     */
    private void fyllNamnArrayList() {
        String query = "select namn from mibdb.agent;";

        try {
            agentNamn = idb.fetchColumn(query);
            for (String namn : agentNamn) {

            }
        } catch (InfException e) {

            e.printStackTrace();
        }

    }

    /**
     * Metod som gör den nyregistrerade agenten till fältagent genom att via
     * InfDB-metoden insert() lägga till dennes Agent_ID i faltagent-tabellen.
     */
    private void setFaltAgent() {
        try {
            String query = "INSERT INTO mibdb.faltagent (Agent_ID) VALUES (" + agentID + ");";
            idb.insert(query);
        } catch (InfException e) {

            e.printStackTrace();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdminSida;
    private javax.swing.JButton btnMinSida;
    private javax.swing.JButton btnRegistrera;
    private javax.swing.JButton btnSkapaEpost;
    private javax.swing.JButton btnSkapaNamn;
    private javax.swing.JComboBox<String> cbAdmin;
    private javax.swing.JComboBox<String> cbOmrade;
    private javax.swing.JComboBox<String> cbValdBokstav;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblLosenord;
    private javax.swing.JLabel lblNamn;
    private javax.swing.JLabel lblPlats;
    private javax.swing.JLabel lblRas;
    private javax.swing.JLabel lblRegDatum;
    private javax.swing.JLabel lblRegistreraAlien;
    private javax.swing.JLabel lblTelefon;
    private javax.swing.JLabel lblVarierande;
    private javax.swing.JTextField txtDatumReg;
    private javax.swing.JTextField txtEpost;
    private javax.swing.JTextField txtLosenOrdReg;
    private javax.swing.JTextField txtNamnReg;
    private javax.swing.JTextField txtTelefon;
    // End of variables declaration//GEN-END:variables
}
