/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package mib.p;

import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import oru.inf.InfDB;
import oru.inf.InfException;

/**
 *HanteraCheferForm är en JPanel-klass där användaren kan
 * söka fram vilka agenter som är områdes-och kontorschefer
 * och om de så vill byta ut dessa mot andra agenter,
 * klassen tar in String epost, och String isAdmin som håller
 * reda på vilken agent som är inloggad, och om denne är admin.
 * @author ASUS
 */
public class HanteraCheferForm extends javax.swing.JPanel {

    private static InfDB idb;
    private String epost;
    private String isAdmin;
    private ArrayList<String> omrade;
    private ArrayList<String> kontor;
    private ArrayList<String> nyOmradesChef;

    private boolean omradePushed;

    /**
     * Creates new form HanteraCheferForm
     */
    public HanteraCheferForm(String epost, String isAdmin) {
        initComponents();
        this.epost = epost;
        this.isAdmin = isAdmin;

        omradePushed = false;

        try {
            idb = new InfDB("mibdb", "3306", "mibdba", "mibkey");
        } catch (InfException ex) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
            System.out.println("Internt felmeddelande" + ex.getMessage());
        }
        fyllArrayListor();
        fyllComboBoxOmrade();
        fyllComboBoxKontor();
        txtNuvarandeChef.setEditable(false);
        txtNuvarandeChefKontor.setEditable(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnMinSida = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        btnBytOmradesChef = new javax.swing.JButton();
        lblOmrade = new javax.swing.JLabel();
        cbOmradesChef = new javax.swing.JComboBox<>();
        btnHittaChefOmrade = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtNuvarandeChef = new javax.swing.JTextField();
        cbNyOmradesChef = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnBytKontorsChef = new javax.swing.JButton();
        lblKontor = new javax.swing.JLabel();
        cbKontorsChef = new javax.swing.JComboBox<>();
        btnHittaChefKontor = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtNuvarandeChefKontor = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        cbNyKontorsChef = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        btnAdminsida = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(550, 343));
        setMinimumSize(new java.awt.Dimension(550, 343));

        btnMinSida.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        btnMinSida.setText("Min sida");
        btnMinSida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinSidaActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(204, 204, 204), null, null));

        btnBytOmradesChef.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        btnBytOmradesChef.setText("Byt chef");
        btnBytOmradesChef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBytOmradesChefActionPerformed(evt);
            }
        });

        lblOmrade.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        lblOmrade.setText("Område:");

        cbOmradesChef.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Välj område" }));

        btnHittaChefOmrade.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        btnHittaChefOmrade.setText("Hitta chef");
        btnHittaChefOmrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHittaChefOmradeActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        jLabel2.setText("Chef:");

        cbNyOmradesChef.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Agenter" }));

        jLabel5.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        jLabel5.setText("Välj ny chef:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel2)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblOmrade)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbOmradesChef, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbNyOmradesChef, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnBytOmradesChef, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnHittaChefOmrade, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(56, 56, 56))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtNuvarandeChef, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOmrade)
                    .addComponent(cbOmradesChef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnHittaChefOmrade))
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtNuvarandeChef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbNyOmradesChef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(btnBytOmradesChef))
                .addGap(30, 30, 30))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(204, 204, 204), null, null));

        btnBytKontorsChef.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        btnBytKontorsChef.setText("Byt chef");
        btnBytKontorsChef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBytKontorsChefActionPerformed(evt);
            }
        });

        lblKontor.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        lblKontor.setText("Kontor:");

        cbKontorsChef.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Välj kontor" }));

        btnHittaChefKontor.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        btnHittaChefKontor.setText("Hitta chef");
        btnHittaChefKontor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHittaChefKontorActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        jLabel4.setText("Chef:");

        jLabel6.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        jLabel6.setText("Välj ny chef:");

        cbNyKontorsChef.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Agenter" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(lblKontor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbKontorsChef, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtNuvarandeChefKontor)
                            .addComponent(cbNyKontorsChef, 0, 138, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBytKontorsChef, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnHittaChefKontor, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(56, 56, 56))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblKontor)
                    .addComponent(cbKontorsChef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnHittaChefKontor))
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtNuvarandeChefKontor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBytKontorsChef)
                    .addComponent(jLabel6)
                    .addComponent(cbNyKontorsChef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
        );

        jLabel1.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        jLabel1.setText("Sök och byt chef:");

        btnAdminsida.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        btnAdminsida.setText("Adminsida");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAdminsida)
                .addGap(95, 95, 95)
                .addComponent(btnMinSida, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(130, 130, 130))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdminsida)
                    .addComponent(btnMinSida))
                .addGap(8, 8, 8))
        );
    }// </editor-fold>//GEN-END:initComponents
/**
     * Metod för att hitta namnet på områdeschefen över valt område;
     * txtNuvarandeChefOmrade sätts med Agentens namn som tas fram med metoden
     * getChefsNamnOmrade(). Metoden kör först
     * rensaNyOmradesChefComboBox()-metoden för att tömma comboboxen så inte
     * samma agent-namn läggs till igen vid framtida sökningar, sedan sätts
     * områdeschefsnamnet och comboxen fylls med agent-namn igen och nuvarande
     * chef tas bort med taBortValdChef()-metoden.
     *
     * @param evt
     */
    private void btnHittaChefOmradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHittaChefOmradeActionPerformed
        if (ValideringsKlass.valideraComboBoxAktivtVal(cbOmradesChef)) {
            rensaNyOmradesChefComboBox();

            txtNuvarandeChef.setText(getChefsNamnOmrade(cbOmradesChef.getSelectedItem().toString()));
            fyllNyOmradesChefComboBox();
            taBortValdChef();
        } else {
            JOptionPane.showMessageDialog(null, "Var god välj område.");
        }
    }//GEN-LAST:event_btnHittaChefOmradeActionPerformed

    private void btnMinSidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinSidaActionPerformed
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(HanteraCheferForm.this);
        frame.setContentPane(new MinSidaAgentForm(epost, isAdmin));
        frame.revalidate();
        frame.setTitle("Startsida: Agent");
        frame.repaint();
    }//GEN-LAST:event_btnMinSidaActionPerformed
    /**
     * Metod för att hitta namnet på kontorschefen; txtNuvarandeChefKontor sätts
     * med Agentens namn som tas fram med metoden getChegsNamnkontor(). Metoden
     * kör först rensaNyKontorsChefComboBox()-metoden för att tömma comboboxen
     * så inte samma agent-namn läggs till igen vid framtida sökningar, sedan
     * sätts kontorschefsnamnet och comboxen fylls med agent-namn igen och
     * nuvarande chef tas bort med taBortValdChefKontor()-metoden.
     *
     * @param evt
     */
    private void btnHittaChefKontorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHittaChefKontorActionPerformed
        if (ValideringsKlass.valideraComboBoxAktivtVal(cbKontorsChef)) {
            rensaNyKontorsChefComboBox();
            txtNuvarandeChefKontor.setText(getChefsNamnKontor(cbKontorsChef.getSelectedItem().toString()));
            fyllNyKontorsChefComboBox();
            taBortValdChefKontor();

        } else {
            JOptionPane.showMessageDialog(null, "Var god välj kontor.");
        }

       
    }//GEN-LAST:event_btnHittaChefKontorActionPerformed
    /**
     * Metod kopplad till btnBytOmradesChef; när den trycks sätts
     * boolean-variabeln omradePushed till true, så rätt Agent_ID returneras när
     * getAgentID()-metoden körs inuti bytChefOmrade som sedan körs när
     * btnBytOmradesChef blir tryckt.
     *
     * @param evt
     */
    private void btnBytOmradesChefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBytOmradesChefActionPerformed
        omradePushed = true;
        if(ValideringsKlass.valideraComboBoxAktivtVal(cbNyOmradesChef))
        {
        bytChefOmrade();}
        else {
            JOptionPane.showMessageDialog(null, "Var god välj agent att befordra.");
        }


    }//GEN-LAST:event_btnBytOmradesChefActionPerformed
    /**
     * Metod kopplad till btnBytKontorschef; när den trycks körs metoden
     * bytKontorsChef() (beskriven längre ner) som i sin tur utför själva bytet.
     *
     * @param evt
     */
    private void btnBytKontorsChefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBytKontorsChefActionPerformed
        if(ValideringsKlass.valideraComboBoxAktivtVal(cbNyKontorsChef))
        {bytKontorsChef();}
        else
        {
         JOptionPane.showMessageDialog(null, "Var god välj agent att befordra.");
        }
    }//GEN-LAST:event_btnBytKontorsChefActionPerformed
    /**
     * Metod för att få Agent_ID på den agent man vill välja som ny områdes-
     * eller kontorschef; boolean-variablen omradePueshed håller reda på om det
     * är områdes- eller kontorsknappen som tryckts på och väljer namn för
     * ID-sök därefter, och agentID returneras i form av int, via metoden
     * fetchSingle från InfDB.
     *
     * @return
     */
    public int getAgentID() {
        String agentNamn;
        int agentID = 0;
        if (omradePushed) {
            agentNamn = cbNyOmradesChef.getSelectedItem().toString();
        } else {
            agentNamn = cbNyKontorsChef.getSelectedItem().toString();
        }
        String query = "SELECT Agent_ID FROM mibdb.agent WHERE namn = '" + agentNamn + "';";

        try {
            agentID = Integer.parseInt(idb.fetchSingle(query));
        } catch (NumberFormatException e) {

            System.out.println("Fel vid konvertering av Agent_ID till heltal: " + e.getMessage());
        } catch (InfException e) {

            System.out.println("Fel vid databasåtkomst: " + e.getMessage());
        }

        return agentID;
    }

    /**
     * Metod för att få namnet på nuvarande områdes-chefen för valt område;
     * metoden tar in områdesnamnet som String-parameter och ger tillbara en
     * String med Agentens namn, via metoden fetchSingle från InfDB.
     *
     * @param omrade
     * @return
     */
    private String getChefsNamnOmrade(String omrade) {
        String chefsNamn;
        String query = "SELECT Namn "
                + "FROM mibdb.agent "
                + "WHERE mibdb.agent.Agent_ID IN ("
                + "    SELECT mibdb.omradeschef.Agent_ID "
                + "    FROM mibdb.omradeschef "
                + "    WHERE Omrade IN ("
                + "        SELECT Omrades_ID "
                + "        FROM mibdb.omrade "
                + "        WHERE Benamning = '" + omrade + "'"
                + "    )"
                + ")";
        try {
            chefsNamn = idb.fetchSingle(query);
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
            System.out.println("Internt felmeddelande: " + e.getMessage());
            return null;
        }
        return chefsNamn;
    }

    /**
     * Metod för att få namnet på nuvarande kontorschefen; metoden tar in
     * kontorsnamnet som String-parameter och ger Agentens namn i return, via
     * metoden fetchSingle från InfDB.
     *
     * @param kontor
     * @return
     */
    private String getChefsNamnKontor(String kontor) {
        String kontorsChef = null;
        try {
            String query = "SELECT namn "
                    + "FROM mibdb.agent "
                    + "WHERE mibdb.agent.Agent_ID IN ( "
                    + "    SELECT mibdb.kontorschef.Agent_ID "
                    + "    FROM mibdb.kontorschef "
                    + "    WHERE Kontorsbeteckning = '" + kontor + "' "
                    + ")";
            kontorsChef = idb.fetchSingle(query);
        } catch (InfException e) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
            System.out.println("Internt felmeddelande: " + e.getMessage());
        }
        return kontorsChef;
    }

    /**
     * Metod som fyller upp ArrayListor med värden över områden, kontor och
     * agent-namn genom att använda InfDB-metoden fetchColumn som skapar
     * arraylistor över de olika valda kolumnerna.
     */
    private void fyllArrayListor() {
        try {
            String query = "SELECT Benamning FROM mibdb.omrade";
            omrade = idb.fetchColumn(query);
            String query2 = "SELECT Kontorsbeteckning FROM mibdb.kontorschef";
            kontor = idb.fetchColumn(query2);
            String query3 = "SELECT Namn FROM mibdb.agent";
            nyOmradesChef = idb.fetchColumn(query3);

        } catch (InfException ex) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
            System.out.println("Internt felmeddelande: " + ex.getMessage());
            omrade = new ArrayList<>();
        }

    }

    /**
     * Metod som fyller upp comboboxen över tillgängliga områden.
     */
    private void fyllComboBoxOmrade() {
        for (String omradet : omrade) {
            cbOmradesChef.addItem(omradet);
        }

    }

    /**
     * Metod som fyller upp comboboxen över tillgängliga kontor.
     */
    private void fyllComboBoxKontor() {
        for (String kontoret : kontor) {
            cbKontorsChef.addItem(kontoret);
        }

    }

    /**
     * Metod som fyller cbNyOmrådesChef-comboboxen med namnen över de Agenter
     * som finns i databasen.
     */
    public void fyllNyOmradesChefComboBox() {
        for (String nyOchef : nyOmradesChef) {
            if (!cbNyOmradesChef.getSelectedItem().toString().equals(txtNuvarandeChef.getText())) {
                cbNyOmradesChef.addItem(nyOchef);
            }
        }

    }

    /**
     * Metod som fyller cbNykontorsChef-comboboxen med namnen över de Agenter
     * som finns i databasen.
     */
    public void fyllNyKontorsChefComboBox() {
        for (String nyKchef : nyOmradesChef) {
            if (!cbNyKontorsChef.getSelectedItem().toString().equals(txtNuvarandeChefKontor.getText())) {
                cbNyKontorsChef.addItem(nyKchef);
            }
        }
    }

    /**
     * Metod för att byta ut den nuvarande områdesschefen; inuti metoden körs
     * getAgentID-metoden för att få Agent_ID på den person man vill ska vara
     * chef, och databsen uppdateras sedan med det ID-numret i kolumnen Benäming
     * i Områdes-tabellen via InfDB-metoden update().
     *
     */
    public void bytChefOmrade() {
        String omradesNamn;
        if (!cbOmradesChef.getSelectedItem().toString().equals("Välj område")) {
            omradesNamn = cbOmradesChef.getSelectedItem().toString();
            int agentID = getAgentID();
            String query = "UPDATE mibdb.omradeschef "
                    + "SET Agent_ID = " + agentID + " "
                    + "WHERE Omrade IN (SELECT Omrades_ID FROM mibdb.omrade WHERE Benamning = '" + omradesNamn + "');";
            try {
                idb.update(query);
                omradePushed = false;
                txtNuvarandeChef.setText("");
                JOptionPane.showMessageDialog(null, cbNyOmradesChef.getSelectedItem().toString() + " är ny chef över " + cbOmradesChef.getSelectedItem().toString());

            } catch (InfException e) {

                JOptionPane.showMessageDialog(null, cbNyOmradesChef.getSelectedItem().toString() + " har redan titeln områdeschef. Välj annan agent.");
            }
        }
    }

    /**
     * Metod som tar bort den nuvarande områdeschefen från listan över agenter
     * att välja som ny chef.
     */
    public void taBortValdChef() {
        cbNyOmradesChef.removeItem(txtNuvarandeChef.getText());
    }

    /**
     * Metod som tar bort den nuvarande kontorschefen från listan över agenter
     * att välja som ny chef.
     */
    public void taBortValdChefKontor() {
        cbNyKontorsChef.removeItem(txtNuvarandeChef.getText());
    }

    /**
     * Metod som tömmer cbNyOmradesChef-comboboxen och återställer den med enda
     * värdet "Agenter", inför nya sökningar.
     */
    public void rensaNyOmradesChefComboBox() {
        cbNyOmradesChef.removeAllItems();
        cbNyOmradesChef.addItem("Agenter");
    }

    /**
     * Metod som tömmer cbNyKontorsChef-comboboxen och återställer den med enda
     * värdet "Agenter", inför nya sökningar.
     */
    public void rensaNyKontorsChefComboBox() {

        cbNyKontorsChef.removeAllItems();
        cbNyKontorsChef.addItem("Agenter");
    }

    /**
     * Metod för att byta ut den nuvarande kontorschefen; Inuti metoden körs
     * getAgentID-metoden för att få Agent_ID på den person man vill ska vara
     * chef, och databsen uppdateras sedan med det ID-numret i tabellen för
     * Kontorschef, med hjälp av InfDB-metoden update(), och den föregående
     * kontorschefen sätts till "Fältagent" via metoden
     * kontorsChefTillFaltAgent().
     *
     */
    public void bytKontorsChef() {

        try {
            int agentID = getAgentID();
            taBortFaltAgent();
            kontorsChefTillFaltAgent();

            String query = "UPDATE mibdb.kontorschef SET Agent_ID = " + agentID + ";";

            idb.update(query);
            JOptionPane.showMessageDialog(null, cbNyKontorsChef.getSelectedItem().toString() + " är ny chef över " + cbKontorsChef.getSelectedItem().toString());
            txtNuvarandeChefKontor.setText("");
        } catch (InfException e) {

            e.printStackTrace();

        }
    }

    /**
     * Metod som tar den nuvarande kontorschefen och sätter dennes Agent_ID i
     * tabellen för fältagent när en ny kontorschef tillsätts, metoden körs i
     * bytKontorsChef()-metoden och använder sig av InfDB-metoderna
     * fetchSingle() och insert() för att hämta Agent_ID för kontorschefen för
     * valt kontor och sedan inserta det i faltagent-tabellen.
     */
    private void kontorsChefTillFaltAgent() {
        try {
            String kontorsbeteckning = cbKontorsChef.getSelectedItem().toString();
            String query = "SELECT agent_id FROM mibdb.kontorschef WHERE Kontorsbeteckning = '" + kontorsbeteckning + "';";

            int agentID2 = Integer.parseInt(idb.fetchSingle(query));
            String query2 = "INSERT INTO mibdb.faltagent (Agent_ID) VALUES (" + agentID2 + ");";
            idb.insert(query2);
        } catch (InfException e) {

            e.printStackTrace();

            JOptionPane.showMessageDialog(null, "Ett fel uppstod vid hantering av kontorschef till fältagent: " + e.getMessage());
        }
    }

    /**
     * Metod som tar bort den valda agenten från fältagent-tabellen när hen blir
     * kontorschef, metoden körs i bytKontorsChef()-metoden, och använder sig av
     * InfDB-metoden delete() för att ta bort vald agent från tabellen
     * faltagent, baserat på Agent_ID som hämtas med hjälp av
     * getAgentID()-metoden.
     */
    private void taBortFaltAgent() {
        try {
            int agentID = getAgentID();
            String query = "DELETE FROM mibdb.faltagent WHERE Agent_ID = " + agentID;
            idb.delete(query);
        } catch (InfException e) {

            e.printStackTrace();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdminsida;
    private javax.swing.JButton btnBytKontorsChef;
    private javax.swing.JButton btnBytOmradesChef;
    private javax.swing.JButton btnHittaChefKontor;
    private javax.swing.JButton btnHittaChefOmrade;
    private javax.swing.JButton btnMinSida;
    private javax.swing.JComboBox<String> cbKontorsChef;
    private javax.swing.JComboBox<String> cbNyKontorsChef;
    private javax.swing.JComboBox<String> cbNyOmradesChef;
    private javax.swing.JComboBox<String> cbOmradesChef;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblKontor;
    private javax.swing.JLabel lblOmrade;
    private javax.swing.JTextField txtNuvarandeChef;
    private javax.swing.JTextField txtNuvarandeChefKontor;
    // End of variables declaration//GEN-END:variables
}
