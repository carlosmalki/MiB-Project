/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package mib.p;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import oru.inf.InfDB;
import oru.inf.InfException;
import java.util.Random;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;

/**
 * TaBortAgentForm är en JPanel-klass där administratörer i systemet kan ta bort
 * vilken annan agent som helst (utom sig själv), en rensning av alla referenser
 * till Agentens ID tas bort ur databasen och agenten avregistreras.
 * @author ASUS
 */

public class TaBortAgentForm extends javax.swing.JPanel {

    private static InfDB idb;
    private ArrayList<String> agentNamn;

    private ArrayList<String> ejChefer;
    private ArrayList<String> omradesChefer;
    private ArrayList<String> kontorsChefer;
    private Random rand;
    private String epost;
    private String isAdmin;
    private String mittNamn;
    private boolean tomLista;

    /**
     * Creates new form TaBortAgent2
     */
    public TaBortAgentForm(String epost, String isAdmin) {
        initComponents();
        try {
            idb = new InfDB("mibdb", "3306", "mibdba", "mibkey");
        } catch (InfException ex) {
            JOptionPane.showMessageDialog(null, "Något gick fel!");
            System.out.println("Internt felmeddelande" + ex.getMessage());
        }
        this.epost = epost;
        this.isAdmin = isAdmin;
        ejChefer = new ArrayList();
        rand = new Random();
        mittNamn = getMittEgetNamn();
      tomLista = false;
        fyllAgentArrayList();
        fyllOmradesChefArrayList();

        fyllKontorsChefArrayList();
        fyllEjChefsArrayList();
        fyllAgentComboBox();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cbAgentNamn = new javax.swing.JComboBox<>();
        btnTaBortAgent = new javax.swing.JButton();
        btnMinSida = new javax.swing.JButton();
        btnAdminSida = new javax.swing.JButton();

        jLabel2.setFont(new java.awt.Font("MS Gothic", 1, 24)); // NOI18N
        jLabel2.setText("Avregistrera agenter");

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(153, 153, 153), null, null));

        jLabel1.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        jLabel1.setText("Välj agent:");

        cbAgentNamn.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Agenter" }));

        btnTaBortAgent.setFont(new java.awt.Font("MS Gothic", 1, 12)); // NOI18N
        btnTaBortAgent.setText("Ta bort agent");
        btnTaBortAgent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTaBortAgentActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(49, 49, 49)
                .addComponent(cbAgentNamn, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(btnTaBortAgent)
                .addGap(17, 17, 17))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbAgentNamn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTaBortAgent)
                    .addComponent(jLabel1))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        btnMinSida.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        btnMinSida.setText("Min sida");
        btnMinSida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinSidaActionPerformed(evt);
            }
        });

        btnAdminSida.setFont(new java.awt.Font("MS Gothic", 1, 14)); // NOI18N
        btnAdminSida.setText("Adminsida");
        btnAdminSida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdminSidaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(btnAdminSida)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnMinSida)
                .addGap(32, 32, 32))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel2)
                .addGap(50, 50, 50)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 107, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnMinSida)
                    .addComponent(btnAdminSida))
                .addGap(20, 20, 20))
        );
    }// </editor-fold>//GEN-END:initComponents
   /**
     * Metod kopplad till btnTaBortAgent, jämför vald agents namn med innehållet
     * i ArrayListorna omradesChefer och KontorsChefer och sedan går vidare till
     * relevant metod beroende på om vald agent är områdeschef, kontorschef,
     * eller ingetdera, råkar man välja att ta bort sig själv avbryts det och
     * man meddelas välja annan agent.
     *
     * @param evt
     */
    private void btnTaBortAgentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTaBortAgentActionPerformed
        String agentensNamn = cbAgentNamn.getSelectedItem().toString();
        testaEjChefArrayList();
        if(!tomLista)
        {testaComboBox();}
        if (agentensNamn.equals(mittNamn)) {
            JOptionPane.showMessageDialog(null, "Du kan inte ta bort dig själv ur databasen. Välj annan agent för borttagning.");
        } else if (omradesChefer.contains(agentensNamn)) {
            taBortOmradesChef(agentensNamn);
        } else if (kontorsChefer.contains(agentensNamn)) {
            taBortKontorsChef(agentensNamn);
        } else {
            bytAnsvarigAgent(agentensNamn);
            taBortFaltAgent(agentensNamn);
            taBortFranUtrustning(agentensNamn);
            taBortAgent(agentensNamn);
        }
    }//GEN-LAST:event_btnTaBortAgentActionPerformed
    /**
     * Metod kopplad till btnAdminSida som fyller upp JFrame med en ny instans
     * av AdminFunktionerForm för att användaren ska kunna ta sig tillbaka till
     * sin adminsida, epost och isAdmin skickas med som parametrar för att
     * initialiera en ny "Admin-sida", fönster-titeln sätts till
     * "Administratörsfunktioner" och fönstret "målas om" för att visa
     * "Admin-sida"-panelen.
     *
     * @param evt
     */
    private void btnAdminSidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdminSidaActionPerformed
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(TaBortAgentForm.this);
        frame.setContentPane(new AdminFunktionerForm(epost, isAdmin));
        frame.revalidate();
        frame.setTitle("Administratörsfunktioner");
        frame.repaint();
    }//GEN-LAST:event_btnAdminSidaActionPerformed
    /**
     * Metod kopplad till btnMinSida som fyller upp JFrame med en ny instans av
     * MinSidaAgentForm för att användaren ska kunna ta sig tillbaka till sin
     * sida, epost och isAdmin skickas med som parametrar för att initialiera en
     * ny "Min Sida", fönster-titeln sätts till "Startida: Agent" och fönstret
     * "målas om" för att visa "Min Sida"-panelen.
     *
     * @param evt
     */
    private void btnMinSidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinSidaActionPerformed
        JFrame frame = (JFrame) SwingUtilities.getWindowAncestor(TaBortAgentForm.this);
        frame.setContentPane(new MinSidaAgentForm(epost, isAdmin));
        frame.revalidate();
        frame.setTitle("Startsida: Agent");
        frame.repaint();
    }//GEN-LAST:event_btnMinSidaActionPerformed
    /**
     * Metod som genom InfDB-metoden fetchColumn skapar en ArrayList över alla
     * agenter som för tillfället finns i databasen.
     */
    private void fyllAgentArrayList() {
        try {

            String query = "SELECT Namn FROM mibdb.agent;";
            agentNamn = idb.fetchColumn(query);
        } catch (InfException e) {

            e.printStackTrace();
        }
    }

    /**
     * Metod som fyller upp en ArrayList över agenter som för tillfället inte är
     * chefer genom att gå genom samtliga agenter (listan agentNamn) och lägga
     * till de namn som inte matchar något i varken omradesChefer-arraylistan
     * eller kontorsChefer-arraylistan, i en ny ArrayList; ejChefer.
     */
    private void fyllEjChefsArrayList() {

        for (String namn : agentNamn) {
            if (!omradesChefer.contains(namn) && !kontorsChefer.contains(namn)) {
                ejChefer.add(namn);
            }
        }
        for (String namn2 : ejChefer) {
            System.out.println(namn2);
        }
    }

    /**
     * Metod som skapar en ArrayList av alla områdeschefer via InfDB-metoden
     * fetchColumn.
     */
    private void fyllOmradesChefArrayList() {

        try {
            String query = "select Namn from mibdb.agent where mibdb.agent.Agent_ID in(select mibdb.omradeschef.Agent_ID from mibdb.omradeschef);";
            omradesChefer = idb.fetchColumn(query);

        } catch (InfException e) {

            e.printStackTrace();
        }
    }

    /**
     * Metod som skapar en ArrayList av alla kontorschefer via InfDB-metoden
     * fetchColumn.
     */
    private void fyllKontorsChefArrayList() {

        try {
            String query = "select Namn from mibdb.agent where mibdb.agent.Agent_ID in(select mibdb.kontorschef.Agent_ID from mibdb.kontorschef);";
            kontorsChefer = idb.fetchColumn(query);

        } catch (InfException e) {

            e.printStackTrace();
        }
    }

    /**
     * Metod som, om vald agent råkar vara områdeschef, går genom stegen för att
     * ta bort eller byta ut alla eventuella referenser till primärnyckeln
     * Agent_ID, i tabellerna alien(Ansvarig_Agent), faltagent,omradeschef,
     * utrustning; slutligen tas agenten bort helt från databasen.
     *
     * @param agentensNamn
     */
    private void taBortOmradesChef(String agentensNamn) {

        bytAnsvarigAgent(agentensNamn);
        taBortFaltAgent(agentensNamn);
        bytChefOmrade(agentensNamn);
        taBortFranUtrustning(agentensNamn);
        taBortAgent(agentensNamn);

    }

    /**
     * Metod som, om vald agent råkar vara kontorschef, går genom stegen för att
     * ta bort eller byta ut alla eventuella referenser till primärnyckeln
     * Agent_ID, i tabellerna alien(Ansvarig_Agent), faltagent,kontorschef,
     * utrustning; slutligen tas agenten bort helt från databasen.
     *
     * @param agentensNamn
     */
    private void taBortKontorsChef(String agentensNamn) {
        bytAnsvarigAgent(agentensNamn);
        taBortFaltAgent(agentensNamn);
        bytChefKontor(agentensNamn);
        taBortFranUtrustning(agentensNamn);
        taBortAgent(agentensNamn);

    }

    /**
     * Metod som utfrån agentens namn hämtar dennes Agent_ID och returnerar som
     * int för att kunna användas i andra metoder där Agent_ID ska tas bort
     * eller bytas ut.
     *
     * @param agentensNamn
     * @return
     */
    private int getAgentID(String agentensNamn) {
        String query = "SELECT Agent_ID FROM mibdb.agent WHERE Namn = '" + agentensNamn + "';";
        int agentID = 0;
        try {
            agentID = Integer.parseInt(idb.fetchSingle(query));
        } catch (InfException e) {

            e.printStackTrace();
        }
        return agentID;
    }

    /**
     * Metod som tar bort Agent_ID från faltagent-tabellen för att sedan kunna
     * gå vidare och ta bort agenten.
     *
     * @param agentensNamn
     */
    private void taBortFaltAgent(String agentensNamn) {
        try {

            int agentID = getAgentID(agentensNamn);
            String query = "DELETE FROM mibdb.faltagent WHERE Agent_ID = " + agentID + ";";

            idb.delete(query);

        } catch (InfException e) {

            e.printStackTrace();

        }
    }

    /**
     * Metod som, om agenten som ska tas bort råkar vara omrpådeschef, byter ut
     * denne mot en framslumpad Agent från arraylistan över agenter som för
     * tillfället inte är chefer,så att inget område står utan chef, den nya
     * chefen tas sedan också bort från tabellen faltagent.
     *
     * @param agentensNamn
     */
    private void bytChefOmrade(String agentensNamn) {
        try {
            int index = rand.nextInt(ejChefer.size());
            int nyttAgentID = getAgentID(ejChefer.get(index));

            String omrade = getOmrade(agentensNamn);
            String query = "UPDATE mibdb.omradeschef "
                    + "SET Agent_ID = " + nyttAgentID + " "
                    + "WHERE Omrade IN (SELECT Omrades_ID FROM mibdb.omrade WHERE Benamning = '" + omrade + "');";
            String query2 = "DELETE FROM faltagent WHERE Agent_ID = " + nyttAgentID;

            idb.update(query);
            idb.delete(query2);

        } catch (InfException e) {
            e.printStackTrace();
        }
    }

    /**
     * Metod som, om agenten som ska tas bort råkar vara kontorschef, byter ut
     * denne mot en framslumpad Agent från arraylistan över agenter som för
     * tillfället inte är chefer,så att inget kontor står utan chef, den nya
     * chefen tas sedan också bort från tabellen faltagent.
     *
     * @param agentensNamn
     */
    public void bytChefKontor(String agentensNamn) {

        int index = rand.nextInt(ejChefer.size());
        int nyttAgentID = getAgentID(ejChefer.get(index));

        String query = "UPDATE mibdb.kontorschef "
                + "SET Agent_ID = " + nyttAgentID + " "
                + "WHERE Kontorsbeteckning = 'Örebrokontoret'";
        String query2 = "DELETE FROM faltagent WHERE Agent_ID = " + nyttAgentID;
        try {
            idb.delete(query2);
            idb.update(query);

        } catch (InfException e) {

        }
    }

    /**
     * Metod som hämtar områdesnamnet för det område en vald agent är
     * områdeschef över, för att sedan kunna använda detta i
     * bytChefOmrade()-metoden.
     *
     * @param agentensNamn
     * @return
     */
    private String getOmrade(String agentensNamn) {
        String omrade = null;
        try {
            String query = "SELECT Benamning "
                    + "FROM mibdb.omrade "
                    + "WHERE Omrades_ID IN ("
                    + "    SELECT Omrade "
                    + "    FROM mibdb.omradeschef "
                    + "    WHERE mibdb.omradeschef.Agent_ID IN ("
                    + "        SELECT mibdb.agent.Agent_ID "
                    + "        FROM mibdb.agent "
                    + "        WHERE namn = '" + agentensNamn + "'"
                    + "    )"
                    + ");";
            omrade = idb.fetchSingle(query);
        } catch (InfException e) {

            e.printStackTrace();
        }

        return omrade;
    }

    /**
     * Metod som tar bort Agent_ID från innehar_utrustning om så är fallet.
     *
     * @param agentensNamn
     */
    public void taBortFranUtrustning(String agentensNamn) {

        try {

            int agentID = getAgentID(agentensNamn);
            String query = "DELETE FROM mibdb.innehar_utrustning WHERE Agent_ID = " + agentID + ";";

            idb.delete(query);

        } catch (InfException e) {

            e.printStackTrace();

        }
    }

    /**
     * Metod som till sist när alla eventuella referenser till Agent_ID är
     * borttagna ur databasen slutligen tar bort agenten och meddelar användaren
     * att så skett.
     *
     * @param agentensNamn
     */
    private void taBortAgent(String agentensNamn) {

        try {

            int agentID = getAgentID(agentensNamn);
            String query = "DELETE FROM mibdb.agent WHERE Agent_ID = " + agentID + ";";

            idb.delete(query);
            JOptionPane.showMessageDialog(null, agentensNamn + " är nu borttagen ur databasen.");
            aterstallAgentArrayList();
            aterstallAgentComboBox();
            fyllAgentComboBox();

        } catch (InfException e) {

            e.printStackTrace();

        }

    }

    /**
     * Metod som slumpar fram en indexsiffra utifrån agentNamn-arraylistans
     * storlek och sedan använder detta för att hämta ut ett agentnamn, och
     * hämta denne agents Agent_ID med metoden getAgentID() och sedan byta ut
     * agenten som ska tas bort som kontaktperson, för att ingen Alien ska stå
     * utan kontakt.
     *
     * @param agentensNamn
     */
    private void bytAnsvarigAgent(String agentensNamn) {
        try {
            int index = rand.nextInt(agentNamn.size());
            int nyttAgentID = getAgentID(agentNamn.get(index));
            int agentID = getAgentID(agentensNamn);

            String query = "UPDATE mibdb.alien "
                    + "SET Ansvarig_Agent = " + nyttAgentID + " "
                    + "WHERE Ansvarig_Agent = " + agentID;

            idb.update(query);

        } catch (InfException e) {
            e.printStackTrace();
        }

    }

    /**
     * Metod som fyller upp agentnamn-comboxen genom att gå igenom agentNamn-
     * arraylistan och lägga till namnen därifrån.
     *
     */
    private void fyllAgentComboBox() {

        for (String namn : agentNamn) {
            cbAgentNamn.addItem(namn);

        }
    }

    /**
     * Metod som återställer agentnamn-comboxoxen genom att först tömma den helt
     * och sedan lägga till "Agenter" på index 0.
     */
    private void aterstallAgentComboBox() {
        cbAgentNamn.removeAllItems();
        cbAgentNamn.addItem("Agenter");
    }

    /**
     * Metod som tömmer agentNamn-ArrayListan, och sedan fyller upp den igen
     * utan den nyss borttagna agenten.
     */
    private void aterstallAgentArrayList() {
        agentNamn.clear();
        fyllAgentArrayList();
    }

    /**
     * Metod som hämtar ut den inloggade agentens namn så denne inte tar bort
     * sig själv.
     */
    private String getMittEgetNamn() {
        String mNamn = "";
        try {
            String query = "SELECT namn FROM mibdb.agent WHERE Epost = '" + epost + "';";
            mNamn = idb.fetchSingle(query);
        } catch (InfException ex) {

            ex.printStackTrace();

        }
        return mNamn;
    }

    public void testaComboBox() {
        try {
            if (!ValideringsKlass.valideraComboBoxAktivtVal(cbAgentNamn)) {
                throw new NullPointerException();
            }

        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "Var god välj agent för borttagning.");
        }
    }

    public void testaEjChefArrayList() {
       
        try {
            if (ValideringsKlass.arArrayListTom(ejChefer)) {
                
                throw new NumberFormatException();
                
            }

        } catch (NumberFormatException e) {
            tomLista = true;
            String meddelande = "<html>Agenten har chefsstatus och kan inte tas bort utan att platsen tillsätts.<br>För närvarande finns inga agenter utan chefsstatus som kan befordras.<br>Registrera ny agent och försök igen.</html>";
            JOptionPane.showMessageDialog(null, meddelande);
        }
    
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdminSida;
    private javax.swing.JButton btnMinSida;
    private javax.swing.JButton btnTaBortAgent;
    private javax.swing.JComboBox<String> cbAgentNamn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
